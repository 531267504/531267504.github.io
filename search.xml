<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>SQL server中使用时间戳分批</title>
      <link href="/2018/08/14/slqserver/shijianchuo/"/>
      <url>/2018/08/14/slqserver/shijianchuo/</url>
      <content type="html"><![CDATA[<p>​    最近在做一个学生密码的筛查功能，要筛查所有学生的密码，判断有弱密码的学生存放到筛查结果表里。因为学生用户量实在太大，而筛查学生密码必须得一条一条用正则判断，实在是慢，不可能让老师点一下等五分钟再出结果，所以想到分批筛查，就采用给学生密码表加一个时间戳来判断筛查批次的方法，每点一次筛查500条，所有学生全部筛查完后给一个提示。</p><p>​    第一次做，就把主要的数据库存储过程放到下面做个备份：<a id="more"></a></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> [dbo].[sp_userPassTimes]</span><br><span class="line">@usertypeid <span class="built_in">INT</span>,</span><br><span class="line">@counts <span class="built_in">INT</span> <span class="keyword">OUTPUT</span>,  <span class="comment">--还剩多少条没筛查</span></span><br><span class="line">@sum2 <span class="built_in">INT</span> <span class="keyword">OUTPUT</span><span class="comment">--本次筛查了多少条</span></span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">DECLARE</span> @a <span class="built_in">INT</span>  <span class="comment">--学生总数</span></span><br><span class="line"><span class="keyword">DECLARE</span> @b <span class="built_in">INT</span>  <span class="comment">--已筛查过的</span></span><br><span class="line"><span class="keyword">DECLARE</span> @c <span class="built_in">INT</span> <span class="comment">--有没有未用完时间戳</span></span><br><span class="line"><span class="keyword">DECLARE</span> @datetime <span class="built_in">INT</span></span><br><span class="line"><span class="keyword">DECLARE</span> @datetime2 <span class="built_in">INT</span></span><br><span class="line"><span class="keyword">DECLARE</span> @screened <span class="built_in">INT</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">DECLARE</span> @<span class="keyword">id</span> <span class="built_in">VARCHAR</span>(<span class="number">50</span>)</span><br><span class="line"><span class="keyword">DECLARE</span> @pwd <span class="built_in">VARCHAR</span>(<span class="number">50</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> @a=<span class="keyword">COUNT</span>(<span class="number">1</span>) <span class="keyword">from</span> student.dbo.UserPassWordSys   <span class="comment">--学生密码表</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> @c=<span class="keyword">COUNT</span>(<span class="number">1</span>) <span class="keyword">FROM</span> student.dbo.UserPassWord_times <span class="keyword">WHERE</span> state = <span class="number">0</span>  <span class="comment">--此表为存放时间戳表 state=0为还没用完</span></span><br><span class="line"><span class="keyword">IF</span> @c=<span class="number">0</span> <span class="keyword">BEGIN</span>  <span class="comment">--没有可用的时间戳了，生成一个</span></span><br><span class="line"><span class="keyword">SELECT</span> @datetime = <span class="keyword">DATEDIFF</span>(S,<span class="string">'1970-01-01 00:00:00'</span>, <span class="keyword">GETDATE</span>()) - <span class="number">8</span> * <span class="number">3600</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student.dbo.UserPassWord_times <span class="keyword">VALUES</span> (@datetime,<span class="number">0</span>) </span><br><span class="line"><span class="keyword">END</span></span><br><span class="line"><span class="keyword">ELSE</span> <span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">SELECT</span> @datetime = times <span class="keyword">FROM</span> student.dbo.UserPassWord_times <span class="keyword">WHERE</span> state = <span class="number">0</span></span><br><span class="line"><span class="keyword">END</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> @b=<span class="keyword">COUNT</span>(<span class="number">1</span>) <span class="keyword">FROM</span> student.dbo.UserPassWordSys <span class="keyword">WHERE</span> times=@datetime</span><br><span class="line"></span><br><span class="line"><span class="keyword">IF</span> @b&lt;@a <span class="keyword">BEGIN</span></span><br><span class="line"><span class="comment">--开始正常流程------11</span></span><br><span class="line"><span class="keyword">set</span> @sum2 = <span class="number">0</span></span><br><span class="line"><span class="keyword">DECLARE</span> pwCursor <span class="keyword">CURSOR</span> <span class="keyword">FOR</span> <span class="keyword">SELECT</span> TOP <span class="number">500</span> UserID,UserPassword <span class="keyword">FROM</span> student.dbo.UserPassWordSys <span class="keyword">WHERE</span> times &lt;&gt; @datetime <span class="keyword">or</span> times <span class="keyword">is</span> <span class="literal">null</span></span><br><span class="line"><span class="keyword">OPEN</span> pwCursor </span><br><span class="line"><span class="keyword">FETCH</span> <span class="keyword">NEXT</span> <span class="keyword">from</span> pwCursor <span class="keyword">into</span> @<span class="keyword">id</span>,@pwd</span><br><span class="line"><span class="keyword">while</span> @@fetch_status=<span class="number">0</span> </span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">UPDATE</span> student.dbo.UserPassWordSys <span class="keyword">SET</span> times = @datetime <span class="keyword">WHERE</span> UserID =@<span class="keyword">id</span></span><br><span class="line"><span class="keyword">set</span> @sum2 = @sum2+<span class="number">1</span></span><br><span class="line"><span class="comment">--判断pwd是否为弱密码 是的话关联查插入筛查表</span></span><br><span class="line"><span class="keyword">IF</span> <span class="keyword">EXISTS</span> (<span class="keyword">SELECT</span> w.WEAKPASS <span class="keyword">FROM</span> student.dbo.tb_b_WeakPassword w <span class="keyword">WHERE</span> w.WEAKPASS=@pwd) <span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student.dbo.tb_b_ScreenResult(userTypeId,userId,<span class="keyword">password</span>,<span class="keyword">name</span>,screenTime,tel) </span><br><span class="line"><span class="keyword">select</span> @usertypeid,u.UserID,u.UserPassword,r.studentname,<span class="keyword">GETDATE</span>(),r.Mobile <span class="keyword">from</span> student.dbo.UserPassWordSys u,student.dbo.stusignsys r <span class="keyword">WHERE</span> u.UserID=@<span class="keyword">id</span> <span class="keyword">AND</span> u.UserID=r.SignUserid </span><br><span class="line"><span class="keyword">END</span></span><br><span class="line"><span class="keyword">ELSE</span> <span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">IF</span> student.dbo.RegExpTest(@pwd,<span class="string">'^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)[a-zA-Z\d]&#123;8,&#125;$'</span>,<span class="number">0</span>)=<span class="number">0</span>  <span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student.dbo.tb_b_ScreenResult(userTypeId,userId,<span class="keyword">password</span>,<span class="keyword">name</span>,screenTime,tel) </span><br><span class="line"><span class="keyword">select</span> @usertypeid,u.UserID,u.UserPassword,r.studentname,<span class="keyword">GETDATE</span>(),r.Mobile <span class="keyword">from</span> student.dbo.UserPassWordSys u,student.dbo.stusignsys r <span class="keyword">WHERE</span> u.UserID=@<span class="keyword">id</span> <span class="keyword">AND</span> u.UserID=r.SignUserid </span><br><span class="line"><span class="keyword">END</span></span><br><span class="line"><span class="keyword">END</span></span><br><span class="line"><span class="keyword">FETCH</span> <span class="keyword">NEXT</span> <span class="keyword">from</span> pwCursor <span class="keyword">into</span> @<span class="keyword">id</span>,@pwd</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">close</span> pwCursor </span><br><span class="line"><span class="keyword">deallocate</span> pwCursor</span><br><span class="line"><span class="comment">--------------------11</span></span><br><span class="line"><span class="keyword">SELECT</span> @screened=<span class="keyword">COUNT</span>(<span class="number">1</span>) <span class="keyword">FROM</span> student.dbo.UserPassWordSys <span class="keyword">WHERE</span> times=@datetime</span><br><span class="line"><span class="keyword">END</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ELSE</span> <span class="keyword">BEGIN</span></span><br><span class="line"><span class="comment">--旧的时间戳已经用完，更新并获取新时间戳</span></span><br><span class="line"><span class="keyword">UPDATE</span> student.dbo.UserPassWord_times <span class="keyword">SET</span> state=<span class="number">1</span> <span class="keyword">WHERE</span> times=@datetime</span><br><span class="line"><span class="keyword">SELECT</span> @datetime2 = <span class="keyword">DATEDIFF</span>(S,<span class="string">'1970-01-01 00:00:00'</span>, <span class="keyword">GETDATE</span>()) - <span class="number">8</span> * <span class="number">3600</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student.dbo.UserPassWord_times <span class="keyword">VALUES</span> (@datetime2,<span class="number">0</span>) </span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> student.dbo.tb_b_ScreenResult <span class="keyword">WHERE</span> userTypeId = @usertypeid</span><br><span class="line"><span class="comment">-----------2</span></span><br><span class="line"><span class="keyword">set</span> @sum2 = <span class="number">0</span></span><br><span class="line"><span class="keyword">DECLARE</span> pwCursor <span class="keyword">CURSOR</span> <span class="keyword">FOR</span> <span class="keyword">SELECT</span> TOP <span class="number">500</span> UserID,UserPassword <span class="keyword">FROM</span> student.dbo.UserPassWordSys <span class="keyword">WHERE</span> times &lt;&gt; @datetime2 <span class="keyword">or</span> times <span class="keyword">is</span> <span class="literal">null</span></span><br><span class="line"><span class="keyword">OPEN</span> pwCursor </span><br><span class="line"><span class="keyword">FETCH</span> <span class="keyword">NEXT</span> <span class="keyword">from</span> pwCursor <span class="keyword">into</span> @<span class="keyword">id</span>,@pwd</span><br><span class="line"><span class="keyword">while</span> @@fetch_status=<span class="number">0</span> </span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">UPDATE</span> student.dbo.UserPassWordSys <span class="keyword">SET</span> times = @datetime2 <span class="keyword">WHERE</span> UserID =@<span class="keyword">id</span></span><br><span class="line"><span class="keyword">set</span> @sum2 = @sum2+<span class="number">1</span></span><br><span class="line"><span class="comment">--判断pwd是否为弱密码 是的话关联查插入筛查表</span></span><br><span class="line"><span class="keyword">IF</span> <span class="keyword">EXISTS</span> (<span class="keyword">SELECT</span> w.WEAKPASS <span class="keyword">FROM</span> student.dbo.tb_b_WeakPassword w <span class="keyword">WHERE</span> w.WEAKPASS=@pwd) <span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student.dbo.tb_b_ScreenResult(userTypeId,userId,<span class="keyword">password</span>,<span class="keyword">name</span>,screenTime,tel) </span><br><span class="line"><span class="keyword">select</span> @usertypeid,u.UserID,u.UserPassword,r.studentname,<span class="keyword">GETDATE</span>(),r.Mobile <span class="keyword">from</span> student.dbo.UserPassWordSys u,student.dbo.stusignsys r <span class="keyword">WHERE</span> u.UserID=@<span class="keyword">id</span> <span class="keyword">AND</span> u.UserID=r.SignUserid </span><br><span class="line"><span class="keyword">END</span></span><br><span class="line"><span class="keyword">ELSE</span> <span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">IF</span> student.dbo.RegExpTest(@pwd,<span class="string">'^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)[a-zA-Z\d]&#123;8,&#125;$'</span>,<span class="number">0</span>)=<span class="number">0</span>  <span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student.dbo.tb_b_ScreenResult(userTypeId,userId,<span class="keyword">password</span>,<span class="keyword">name</span>,screenTime,tel) </span><br><span class="line"><span class="keyword">select</span> @usertypeid,u.UserID,u.UserPassword,r.studentname,<span class="keyword">GETDATE</span>(),r.Mobile <span class="keyword">from</span> student.dbo.UserPassWordSys u,student.dbo.stusignsys r <span class="keyword">WHERE</span> u.UserID=@<span class="keyword">id</span> <span class="keyword">AND</span> u.UserID=r.SignUserid </span><br><span class="line"><span class="keyword">END</span></span><br><span class="line"><span class="keyword">END</span></span><br><span class="line"><span class="keyword">FETCH</span> <span class="keyword">NEXT</span> <span class="keyword">from</span> pwCursor <span class="keyword">into</span> @<span class="keyword">id</span>,@pwd</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">close</span> pwCursor </span><br><span class="line"><span class="keyword">deallocate</span> pwCursor</span><br><span class="line"><span class="comment">----------------2</span></span><br><span class="line"><span class="keyword">SELECT</span> @screened=<span class="keyword">COUNT</span>(<span class="number">1</span>) <span class="keyword">FROM</span> student.dbo.UserPassWordSys <span class="keyword">WHERE</span> times=@datetime2</span><br><span class="line"><span class="keyword">END</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">SET</span> @counts = @a-@screened</span><br><span class="line"></span><br><span class="line"><span class="keyword">END</span></span><br></pre></td></tr></table></figure><p>​    把上面的调用的sql正则函数也放在下面，因为想把方法抽象出来这样上面的过程能简单点，实际使用时还是写在一起好，因为在sqlserver中使用正则是创建ole对象调用vbs中的RegExp，调用下面的方法会频繁创建销毁对象，系统效率大打折扣，实际只需在上面过程一开始创建，最后销毁即可。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> dbo.RegExpTest (  </span><br><span class="line">  @<span class="keyword">source</span> <span class="built_in">varchar</span>(<span class="number">5000</span>),   <span class="comment">--需要匹配的源字符串  </span></span><br><span class="line">  @regexp <span class="built_in">varchar</span>(<span class="number">1000</span>),  <span class="comment">--正则表达式  </span></span><br><span class="line">  @ignorecase <span class="built_in">bit</span> = <span class="number">0</span>  <span class="comment">--是否区分大小写，默认为false 1为区分大小写</span></span><br><span class="line"> )  </span><br><span class="line"><span class="keyword">RETURNS</span> <span class="built_in">bit</span>  <span class="comment">--返回结果0-false，1-true  </span></span><br><span class="line"><span class="keyword">AS</span>  </span><br><span class="line"> <span class="keyword">BEGIN</span>  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"> <span class="comment">--0（成功）或非零数字（失败），是由 OLE 自动化对象返回的 HRESULT 的整数值。  </span></span><br><span class="line">  <span class="keyword">DECLARE</span> @hr <span class="built_in">integer</span>  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="comment">--用于保存返回的对象令牌，以便之后对该对象进行操作  </span></span><br><span class="line">  <span class="keyword">DECLARE</span> @objRegExp <span class="built_in">integer</span>   <span class="keyword">DECLARE</span> @objMatches <span class="built_in">integer</span>  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="comment">--保存结果  </span></span><br><span class="line">  <span class="keyword">DECLARE</span> @results <span class="built_in">bit</span>  </span><br><span class="line">   </span><br><span class="line"><span class="comment">/*  </span></span><br><span class="line"><span class="comment">创建 OLE 对象实例,只有 sysadmin 固定服务器角色的成员才能执行 sp_OACreate,并确定机器中有VBScript.RegExp类库  </span></span><br><span class="line"><span class="comment">*/</span>  </span><br><span class="line">  EXEC @hr = sp_OACreate <span class="string">'VBScript.RegExp'</span>, @objRegExp <span class="keyword">OUTPUT</span>  </span><br><span class="line">  <span class="keyword">IF</span> @hr &lt;&gt; <span class="number">0</span> <span class="keyword">BEGIN</span>  </span><br><span class="line">   <span class="keyword">SET</span> @results = <span class="number">0</span>  </span><br><span class="line">   <span class="keyword">RETURN</span> @results  </span><br><span class="line">  <span class="keyword">END</span>  </span><br><span class="line"><span class="comment">/*  </span></span><br><span class="line"><span class="comment">以下三个分别是设置新建对象的三个属性。下面是'VBScript.RegExp'中常用的属性举例：  </span></span><br><span class="line"><span class="comment">    Dim regEx,Match,Matches         '建立变量。  </span></span><br><span class="line"><span class="comment">    Set regEx = New RegExp         '建立一般表达式。  </span></span><br><span class="line"><span class="comment">    regEx.Pattern= patrn         '设置模式。  </span></span><br><span class="line"><span class="comment">    regEx.IgnoreCase = True         '设置是否区分大小写。  </span></span><br><span class="line"><span class="comment">    regEx.Global=True                             '设置全局可用性。  </span></span><br><span class="line"><span class="comment">    set Matches=regEx.Execute(string)             '重复匹配集合  </span></span><br><span class="line"><span class="comment">    RegExpTest = regEx.Execute(strng)      '执行搜索。  </span></span><br><span class="line"><span class="comment">   for each match in matches                    '重复匹配集合  </span></span><br><span class="line"><span class="comment">   RetStr=RetStr &amp;"Match found at position "  </span></span><br><span class="line"><span class="comment">   RetStr=RetStr&amp;Match.FirstIndex&amp;".Match Value is '"  </span></span><br><span class="line"><span class="comment">   RetStr=RetStr&amp;Match.Value&amp;"'."&amp;vbCRLF Next  </span></span><br><span class="line"><span class="comment">   RegExpTest=RetStr  </span></span><br><span class="line"><span class="comment">  </span></span><br><span class="line"><span class="comment">  </span></span><br><span class="line"><span class="comment">*/</span> </span><br><span class="line"></span><br><span class="line">  EXEC @hr = sp_OASetProperty @objRegExp, <span class="string">'Pattern'</span>, @regexp  </span><br><span class="line">  <span class="keyword">IF</span> @hr &lt;&gt; <span class="number">0</span> <span class="keyword">BEGIN</span>  </span><br><span class="line">   <span class="keyword">SET</span> @results = <span class="number">0</span>  </span><br><span class="line">   <span class="keyword">RETURN</span> @results  </span><br><span class="line">  <span class="keyword">END</span>  </span><br><span class="line">  EXEC @hr = sp_OASetProperty @objRegExp, <span class="string">'Global'</span>, <span class="literal">false</span>  </span><br><span class="line">  <span class="keyword">IF</span> @hr &lt;&gt; <span class="number">0</span> <span class="keyword">BEGIN</span>  </span><br><span class="line">   <span class="keyword">SET</span> @results = <span class="number">0</span>  </span><br><span class="line">   <span class="keyword">RETURN</span> @results  </span><br><span class="line">  <span class="keyword">END</span>  </span><br><span class="line">  EXEC @hr = sp_OASetProperty @objRegExp, <span class="string">'IgnoreCase'</span>, @ignorecase  </span><br><span class="line">  <span class="keyword">IF</span> @hr &lt;&gt; <span class="number">0</span> <span class="keyword">BEGIN</span>  </span><br><span class="line">   <span class="keyword">SET</span> @results = <span class="number">0</span>  </span><br><span class="line">   <span class="keyword">RETURN</span> @results  </span><br><span class="line">  <span class="keyword">END</span>  </span><br><span class="line"><span class="comment">--调用对象方法  </span></span><br><span class="line">  EXEC @hr = sp_OAMethod @objRegExp, <span class="string">'Test'</span>, @results <span class="keyword">OUTPUT</span>, @<span class="keyword">source</span>  </span><br><span class="line">  <span class="keyword">IF</span> @hr &lt;&gt; <span class="number">0</span> <span class="keyword">BEGIN</span>  </span><br><span class="line">   <span class="keyword">SET</span> @results = <span class="number">0</span>  </span><br><span class="line">   <span class="keyword">RETURN</span> @results  </span><br><span class="line">  <span class="keyword">END</span>  </span><br><span class="line"><span class="comment">--释放已创建的 OLE 对象  </span></span><br><span class="line">  EXEC @hr = sp_OADestroy @objRegExp  </span><br><span class="line">  <span class="keyword">IF</span> @hr &lt;&gt; <span class="number">0</span> <span class="keyword">BEGIN</span>  </span><br><span class="line">   <span class="keyword">SET</span> @results = <span class="number">0</span>  </span><br><span class="line">   <span class="keyword">RETURN</span> @results  </span><br><span class="line">  <span class="keyword">END</span>  </span><br><span class="line"> <span class="keyword">RETURN</span> @results  </span><br><span class="line"> <span class="keyword">END</span>  </span><br><span class="line"> </span><br><span class="line"> <span class="comment">--如果存在问题，需执行以下脚本 启用ole组件</span></span><br><span class="line"> <span class="comment">--sp_configure 'show advanced options', 1;  </span></span><br><span class="line"><span class="comment">--GO  </span></span><br><span class="line"><span class="comment">--RECONFIGURE;  </span></span><br><span class="line"><span class="comment">--GO  </span></span><br><span class="line"><span class="comment">--sp_configure 'Ole Automation Procedures', 1;  </span></span><br><span class="line"><span class="comment">--GO  </span></span><br><span class="line"><span class="comment">--RECONFIGURE;  </span></span><br><span class="line"><span class="comment">--GO</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> SQL server </tag>
            
            <tag> 时间戳 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Java数据结构与算法学习笔记——二叉树</title>
      <link href="/2018/08/10/java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/Java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B09%E2%80%94%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
      <url>/2018/08/10/java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/Java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B09%E2%80%94%E4%BA%8C%E5%8F%89%E6%A0%91/</url>
      <content type="html"><![CDATA[<p>​    接下来将要介绍另外一种数据结构——树。二叉树是这种数据结构的一员，之后还有红黑树，2-3-4数等。</p><p>​    前面我们介绍数组的数据结构，我们知道对于有序数组，查找很快，并介绍可以通过二分法查找，但是想要在有序数组中插入一个数据项，就必须先找到插入数据项的位置，然后将所有插入位置后面的数据项全部向后移动一位，来给新数据腾出空间，平均来讲要移动N/2次，这是很费时的。同理，删除数据也是。</p><p>　　然后我们介绍了另外一种数据结构——链表，链表的插入和删除很快，我们只需要改变某些节点的引用值就行了，但是查找数据却很慢了，因为不管我们查找什么数据，都需要从链表的第一个数据项开始，遍历到找到所需数据项为止，这个查找也是平均需要比较N/2次。</p><p>　　那么我们就希望一种数据结构能同时具备数组查找快的优点以及链表插入和删除快的优点，于是 树 诞生了。<a id="more"></a>还在学习中。。。</p>]]></content>
      
      <categories>
          
          <category> Java数据结构与算法学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java数据结构与算法 </tag>
            
            <tag> 树 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Java数据结构与算法学习笔记——高级排序</title>
      <link href="/2018/08/09/java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/Java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B08%E2%80%94%E9%AB%98%E7%BA%A7%E6%8E%92%E5%BA%8F/"/>
      <url>/2018/08/09/java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/Java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B08%E2%80%94%E9%AB%98%E7%BA%A7%E6%8E%92%E5%BA%8F/</url>
      <content type="html"><![CDATA[<hr><p>​    在中我们介绍了三种简单的排序算法，它们的时间复杂度大O表示法都是O(N2)，如果数据量少，我们还能忍受，但是数据量大，那么这三种简单的排序所需要的时间则是我们所不能接受的。接着我们在讲解递归的时候，介绍了归并排序，归并排序需要O(NlogN)，这比简单排序要快了很多，但是归并排序有个缺点，它需要的空间是原始数组空间的两倍，当我们需要排序的数据占据了整个内存的一半以上的空间，那么是不能使用归并排序的。</p><p>​    本次我们介绍几种高级的排序算法：希尔排序和快速排序。<a id="more"></a></p><h2 id="1-希尔排序"><a href="#1-希尔排序" class="headerlink" title="1. 希尔排序"></a>1. 希尔排序</h2><p>​    <strong>希尔排序</strong>(Shell’s Sort)是插入排序的一种又称“缩小增量排序”（Diminishing Increment Sort），是直接插入排序算法的一种更高效的改进版本。</p><p>​    之前学习插入排序排序的我们说过，在数据基本有序时，插入排序的效率很高，所以引入希尔排序，把要排序的记录按一定的间隔gap分组，对每组记录都按照插入排序进行排序。之后间隔逐步减小并且最后减小为1，最后一趟排序即为基本的插入排序。<img src="\postsource\java数据结构与算法\8\1.png" alt=""></p><p>​    分析希尔排序为何比是插入排序的升级版：当间隔很大时，每一趟排序需要对比的元素个数很少，当间隔减小时，此时需要移动的数据增多，但每一项元素已接近他们排序后的最终位置，也就是数据已基本有序。正是这两种情况的结合才使希尔排序效率比插入排序高很多 。</p><p><strong>间隔序列的选择</strong></p><p>​    增量序列是影响希尔排序性能的重要因素，任何最终步长为1的序列都可以作为希尔排序的间隔序列。希尔最初建议选择N/2为间隔，但在后来被证明效率很低。已知的最好步长序列是由Sedgewick提出的(1, 5, 19, 41, 109,…) 。</p><p>​    我们使用一种很常用的间隔序列来实现希尔排序：<strong>knuth 间隔序列 3h+1(1,4,13,40,…)</strong> </p><p><img src="\postsource\java数据结构与算法\8\2.png" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">shellKnuthSort</span><span class="params">(<span class="keyword">int</span>[] array)</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"原数组为"</span>+Arrays.toString(array));</span><br><span class="line">    <span class="keyword">int</span> step = <span class="number">1</span> ;</span><br><span class="line">    <span class="keyword">int</span> len = array.length;</span><br><span class="line">    <span class="keyword">while</span>(step &lt;= len/<span class="number">3</span>)&#123;</span><br><span class="line">        step = step*<span class="number">3</span> + <span class="number">1</span>;<span class="comment">//1,4,13,40......</span></span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">while</span>(step &gt; <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="comment">//分别对每个增量间隔进行排序</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = step ; i &lt; len ; i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> temp = array[i];</span><br><span class="line">            <span class="keyword">int</span> j = i;</span><br><span class="line">            <span class="keyword">while</span>(j &gt; step-<span class="number">1</span> &amp;&amp; temp &lt;= array[j-step])&#123;</span><br><span class="line">                array[j] = array[j-step];</span><br><span class="line">                j -= step;</span><br><span class="line">            &#125;</span><br><span class="line">            array[j] = temp;</span><br><span class="line">        &#125;<span class="comment">//end for</span></span><br><span class="line">        System.out.println(<span class="string">"间隔为"</span>+step+<span class="string">"的排序结果为"</span>+Arrays.toString(array));</span><br><span class="line">        step = (step-<span class="number">1</span>)/<span class="number">3</span>;</span><br><span class="line">    &#125;<span class="comment">//end while(step&gt;0)</span></span><br><span class="line">         </span><br><span class="line">    System.out.println(<span class="string">"最终排序："</span>+Arrays.toString(array));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-快速排序"><a href="#2-快速排序" class="headerlink" title="2. 快速排序"></a>2. 快速排序</h2><p>​    <strong>快速排序</strong>（Quicksort）是对冒泡排序的一种改进。 由C. A. R. Hoare在1962年提出。它的基本思想是：通过一趟排序将要排序的数据分割成独立的两部分，其中一部分的所有数据都比另外一部分的所有数据都要小，然后再按此方法对这两部分数据分别进行快速排序，整个排序过程可以递归进行，以此达到整个数据变成有序序列。</p><p><strong>快速排序基本思路：</strong></p><p>​    比如排序[6  1  2 7  9  3  4  5 10  8 ]，我们选一个数作为<strong>基准数</strong>(<em>原则上随机选取，但是我们一般选取数组中第一个元素作为基准元素</em>)，我们这里选择6为基准数，接下来，将这个数组中所有比6大的数放在6的右边，比6小的数放在左边，经过第一轮后数组变为下面这样：</p><p>​    [ 3  1  2 5  4  <strong><u>6</u></strong>  9 7  10  8 ]</p><p>​    我们只要取基准元素左右两部分[3 1 2 5 4]和[9 7 10 8]再递归下去，直至对每个元素都完成排序即可。图示如下：</p><p><img src="\postsource\java数据结构与算法\8\3.jpg" alt=""></p><p>​    我们对上图数组进行快速排序，选取6作为基准数。我们假定有两个游标，小兵i和小兵j，小兵j向左扫描，直到<strong>遇到一个小于基准元素的数</strong>，在那个位置停下；小兵i向右扫描，直到<strong>遇到一个大于基准元素的数</strong>，在那个位置停下。</p><p>​    因为我们选取了左侧为基准数，所以需要让最右边的数，也就是小兵j先开始出动（关于为何必须j先移动下面有解释）。</p><p><img src="\postsource\java数据结构与算法\8\4.jpg" alt=""></p><p>​    现在小兵i停在7上，j停在5上，现在交换小兵i和小兵j所指向的元素的值。交换后的序列如下：</p><p><img src="\postsource\java数据结构与算法\8\5.jpg" alt=""></p><p>​    接着，j继续向左移动，在数字4上停下；i继续向右移动，在数字9上停下，然后再次交换。</p><p><img src="/images/placeholder.png" alt="" data-src="\postsource\java数据结构与算法\8\6.jpg" class="lazyload"></p><p><img src="/images/placeholder.png" alt="" data-src="\postsource\java数据结构与算法\8\7.jpg" class="lazyload"></p><p>​    第二次交换结束后，小兵j继续向左移动，在数字3上停下；小兵i继续向右移动，当他和j相遇时，说明此次探测结束，将数字3和基准数字6交换（如果此时i先移动，会在数字9上相遇，把9这个大于6的数换到右边）。</p><p><img src="/images/placeholder.png" alt="" data-src="\postsource\java数据结构与算法\8\8.jpg" class="lazyload"></p><p><img src="/images/placeholder.png" alt="" data-src="\postsource\java数据结构与算法\8\9.jpg" class="lazyload"></p><p><img src="/images/placeholder.png" alt="" data-src="\postsource\java数据结构与算法\8\10.jpg" class="lazyload"></p><p>​    到此第一轮“探测”真正结束。此时以基准数6为分界点，6左边的数都小于等于6，6右边的数都大于等于6。 接着对分隔后的数组重复上面的操作，直至排序完全结束。下面用一张图来描述上面的整个过程：</p><p><img src="/images/placeholder.png" alt="" data-src="\postsource\java数据结构与算法\8\11.jpg" class="lazyload"></p><p>完整代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> array;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QuickSort</span> </span>&#123;</span><br><span class="line">     </span><br><span class="line">    <span class="comment">//数组array中下标为i和j位置的元素进行交换</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>[] array , <span class="keyword">int</span> i , <span class="keyword">int</span> j)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> temp = array[i];</span><br><span class="line">        array[i] = array[j];</span><br><span class="line">        array[j] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">recQuickSort</span><span class="params">(<span class="keyword">int</span>[] array,<span class="keyword">int</span> left,<span class="keyword">int</span> right)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(right &lt;= left)&#123;</span><br><span class="line">            <span class="keyword">return</span>;<span class="comment">//终止递归</span></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">int</span> partition = partitionIt(array,left,right);</span><br><span class="line">            recQuickSort(array,left,partition-<span class="number">1</span>);<span class="comment">// 对上一轮排序(切分)时，基准元素左边的子数组进行递归</span></span><br><span class="line">            recQuickSort(array,partition+<span class="number">1</span>,right);<span class="comment">// 对上一轮排序(切分)时，基准元素右边的子数组进行递归</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">partitionIt</span><span class="params">(<span class="keyword">int</span>[] array,<span class="keyword">int</span> left,<span class="keyword">int</span> right)</span></span>&#123;</span><br><span class="line">        <span class="comment">//为什么 j加一个1，而i没有加1,是因为下面的循环判断是从--j和++i开始的.</span></span><br><span class="line">        <span class="comment">//而基准元素选的array[left],即第一个元素，所以左游标从第二个元素开始比较</span></span><br><span class="line">        <span class="keyword">int</span> i = left;</span><br><span class="line">        <span class="keyword">int</span> j = right+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> pivot = array[left];<span class="comment">// pivot 为选取的基准元素（头元素）</span></span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="comment">//当选取左侧为基准时，必需先从右侧游标开始移动。</span></span><br><span class="line">            <span class="keyword">while</span>(j &gt; <span class="number">0</span> &amp;&amp; array[--j] &gt; pivot &amp;&amp;i&lt;j)&#123;&#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span>(i&lt;right &amp;&amp; array[++i] &lt; pivot &amp;&amp;i&lt;j)&#123;&#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//也可以删除i&lt;j这个条件，这样就不必在意从哪边先开始，最后与基准换的不一定是交点而一定是j所处的位置</span></span><br><span class="line">            <span class="comment">//while(j &gt; 0 &amp;&amp; array[--j] &gt; pivot )&#123;&#125;</span></span><br><span class="line">            <span class="comment">//while(i&lt;right &amp;&amp; array[++i] &lt; pivot )&#123;&#125;</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(i &gt;= j)&#123;<span class="comment">// 左右游标相遇时候停止。或者i已经大于了j，两者已经交叉过去。</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                swap(array, i, j);<span class="comment">// 左右游标未相遇时停止, 交换各自所指元素，循环继续</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        swap(array, left, j);<span class="comment">//基准元素和游标相遇时所指元素交换，为最后一次交换</span></span><br><span class="line">        <span class="keyword">return</span> j;<span class="comment">// 一趟排序完成， 返回基准元素位置(注意这里基准元素已经交换位置了)</span></span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span>[] array)</span></span>&#123;</span><br><span class="line">        recQuickSort(array, <span class="number">0</span>, array.length-<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="comment">//测试</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] array = &#123;<span class="number">6</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">7</span>,<span class="number">6</span>&#125;;</span><br><span class="line">        sort(array);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i : array)&#123;</span><br><span class="line">            System.out.print(i+<span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//打印结果为：1 2 6 6 7 7 9</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Java数据结构与算法学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java数据结构与算法 </tag>
            
            <tag> 排序算法 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Java数据结构与算法学习笔记——递归</title>
      <link href="/2018/08/08/java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/Java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B07%E2%80%94%E9%80%92%E5%BD%92/"/>
      <url>/2018/08/08/java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/Java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B07%E2%80%94%E9%80%92%E5%BD%92/</url>
      <content type="html"><![CDATA[<hr><p>​    <strong>程序调用自身的编程技巧称为递归（ recursion）。</strong>递归做为一种<strong>算法</strong>在程序设计语言中广泛应用。 一个过程或函数在其定义或说明中有直接或间接调用自身的一种方法，它通常把一个大型复杂的问题层层转化为一个与原问题相似的规模较小的问题来求解，递归策略只需少量的程序就可描述出解题过程所需要的多次重复计算，大大地减少了程序的代码量。递归的能力在于用有限的语句来定义对象的无限集合。 <a id="more"></a></p><h2 id="1-递归定义"><a href="#1-递归定义" class="headerlink" title="1. 递归定义"></a>1. 递归定义</h2><p>​    递归，就是在运行的过程中调用自己。</p><p>​    构成递归的条件：</p><pre><code>1. 子问题须与原始问题为同样的事，且更为简单；2. 不能无限制地调用本身，须有个出口，化简为非递归状况处理。</code></pre><h2 id="2-求一个数的阶乘-：n"><a href="#2-求一个数的阶乘-：n" class="headerlink" title="2. 求一个数的阶乘 ：n!"></a>2. 求一个数的阶乘 ：n!</h2><p>规定：</p><p><em>0! = 1 ; 负数没有阶乘</em></p><p>对于阶乘，我们先用for循环来实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getFactorialFor</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> temp = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(n &gt;=<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span> ; i &lt;= n ; i++)&#123;</span><br><span class="line">            temp = temp*i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们用递归来改写： <code>n! = n*(n-`</code>1<code></code>)！` </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getFactorial</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n &gt;= <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">0</span>)&#123;</span><br><span class="line">            System.out.println(n+<span class="string">"!=1"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(n);</span><br><span class="line">            <span class="keyword">int</span> temp = n*getFactorial(n-<span class="number">1</span>);</span><br><span class="line">            System.out.println(n+<span class="string">"!="</span>+temp);</span><br><span class="line">            <span class="keyword">return</span> temp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段递归程序的边界条件就是n==0时，返回1，比如当调用 <em>getFactorial(3)</em> 时，程序的执行过程如下：$getFactorial(3) -&gt;3<em>getFactorial(2)-&gt;3</em>2<em>getFactorial(1)-&gt;3</em>2<em>1</em>getFactorial(0)-&gt;3<em>2</em>1*1$</p><h2 id="3-递归的二分查找"><a href="#3-递归的二分查找" class="headerlink" title="3. 递归的二分查找"></a>3. 递归的二分查找</h2><p>​    注意：二分查找的数组一定是有序的。</p><p>​    在有序数组array[]中，不断将数组的中间值（mid）和被查找的值比较，如果被查找的值等于array[mid],就返回下标mid; 否则，就将查找范围缩小一半。如果被查找的值小于array[mid], 就继续在左半边查找;如果被查找的值大于array[mid],  就继续在右半边查找。 直到查找到该值或者查找范围为空时， 查找结束。 </p><p><img src="\postsource\java数据结构与算法\7\1.png" alt=""></p><p>​    不用递归的二分查找如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">findTwoPoint</span><span class="params">(<span class="keyword">int</span>[] array,<span class="keyword">int</span> key)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> start = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> last = array.length-<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(start &lt;= last)&#123;</span><br><span class="line">        <span class="keyword">int</span> mid = (last-start)/<span class="number">2</span>+start;<span class="comment">//防止直接相加造成int范围溢出</span></span><br><span class="line">        <span class="keyword">if</span>(key == array[mid])&#123;<span class="comment">//查找值等于当前值，返回数组下标</span></span><br><span class="line">            <span class="keyword">return</span> mid;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(key &gt; array[mid])&#123;<span class="comment">//查找值比当前值大</span></span><br><span class="line">            start = mid+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(key &lt; array[mid])&#123;<span class="comment">//查找值比当前值小</span></span><br><span class="line">            last = mid-<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    改用递归来做，首先要分析问题的边界条件，简单分析可知，边界条件要么是找到要查找的值，或者查找范围缩小为空。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">search</span><span class="params">(<span class="keyword">int</span>[] array,<span class="keyword">int</span> key,<span class="keyword">int</span> low,<span class="keyword">int</span> high)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> mid = (high-low)/<span class="number">2</span>+low;</span><br><span class="line">    <span class="keyword">if</span>(key == array[mid])&#123;<span class="comment">//查找值等于当前值，返回数组下标</span></span><br><span class="line">        <span class="keyword">return</span> mid;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(low &gt; high)&#123;<span class="comment">//找不到查找值，返回-1</span></span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(key &lt; array[mid])&#123;<span class="comment">//查找值比当前值小</span></span><br><span class="line">            <span class="keyword">return</span> search(array,key,low,mid-<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(key &gt; array[mid])&#123;<span class="comment">//查找值比当前值大</span></span><br><span class="line">            <span class="keyword">return</span> search(array,key,mid+<span class="number">1</span>,high);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    二分法每次减少一半的数据，分析可知，递归与非递归的二分查找时间复杂度都为O(logN)，使用递归更加简洁，便于理解，但速度会比非递归慢。</p><h2 id="4-消除递归"><a href="#4-消除递归" class="headerlink" title="4. 消除递归"></a>4. 消除递归</h2><p>​    一个算法作为一个递归的方法通常通概念上很容易理解，但是递归的使用在方法的调用和返回都会有额外的开销，通常情况下，用递归能实现的，用循环都可以实现，而且循环的效率会更高，所以在实际应用中，把递归的算法转换为非递归的算法是非常有用的。这种转换通常会使用到栈。</p><h5 id="递归和栈"><a href="#递归和栈" class="headerlink" title="递归和栈"></a>递归和栈</h5><p>　　递归和栈有这紧密的联系，而且大多数编译器都是用栈来实现递归的，当调用一个方法时，编译器会把这个方法的所有参数和返回地址都压入栈中，然后把控制转移给这个方法。当这个方法返回时，这些值退栈。参数消失了，并且控制权重新回到返回地址处。</p><p>　　调用一个方法时所发生的事：</p><p>　　一、当一个方法被调用时，它的参数和返回地址被压入一个栈中；</p><p>　　二、这个方法可以通过获取栈顶元素的值来访问它的参数；</p><p>　　三、当这个方法要返回时，它查看栈以获得返回地址，然后这个地址以及方法的所有参数退栈，并且销毁。</p><h2 id="5-汉诺塔问题"><a href="#5-汉诺塔问题" class="headerlink" title="5. 汉诺塔问题"></a>5. 汉诺塔问题</h2><p>​    汉诺塔问题可以很好的体现出递归的魅力所在，我们只需知道如何把复杂的问题分解，并且知道在问题最简单的时候怎么做，剩下的只需交由程序来完成即可，比起一步一步写代码指导电脑的“命令式编程”要简洁的很多，下面来具体看这个问题：</p><p>​    <img src="\postsource\java数据结构与算法\7\2.jpg" alt=""></p><blockquote><p>A杆上有若干个有小到大的圆盘，借助B杆把A杆上的圆盘移到C杆，并保持原有顺序，每次只能移动一个圆盘且移动过程中大盘不能压在小盘上面。</p></blockquote><p>​    当只有两个盘子的时候，我们只需要将盘子1先移动到B塔座上，然后将盘子2移动到C塔座，最后将盘子1移动到C塔座上。即完成2个盘子从A到C的移动。 </p><p>​    当有多个盘子时，也可以把整个汉诺塔想成两个潘总，最底层的第N个盘子，上面的(N-1)~1个盘子想成一个整体，那么解决办法为：</p><p>​    <strong>①、先将A塔座的第(N-1)~1个盘子看成是一个盘子，放到中介塔座B上，然后将第N个盘子放到目标塔座C上。</strong></p><p>　　<strong>②、然后A塔座为空，看成是中介塔座，B塔座这时候有N-1个盘子，将第(N-2)~1个盘子看成是一个盘子，放到中介塔座A上，然后将B塔座的第(N-1)号盘子放到目标塔座C上。</strong></p><p>　　<strong>③、这时候A塔座上有(N-2)个盘子，B塔座为空，又将B塔座视为中介塔座，重复①，②步骤，直到所有盘子都放到目标塔座C上结束。</strong></p><p><img src="\postsource\java数据结构与算法\7\3.png" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Hanoi</span><span class="params">(<span class="keyword">int</span> dish,String from,String temp,String to)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(dish == <span class="number">1</span>)&#123;</span><br><span class="line">     System.out.println(<span class="string">"将盘子"</span>+dish+<span class="string">"从塔座"</span>+from+<span class="string">"移动到目标塔座"</span>+to);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        Hanoi(dish-<span class="number">1</span>,from,to,temp);<span class="comment">//A为初始塔座，B为目标塔座，C为中介塔</span></span><br><span class="line">        System.out.println(<span class="string">"将盘子"</span>+dish+<span class="string">"从塔座"</span>+from+<span class="string">"移动到目标塔座"</span>+to);</span><br><span class="line">        Hanoi(dish-<span class="number">1</span>,temp,from,to);<span class="comment">//B为初始塔座，C为目标塔座，A为中介塔</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试：   <code>Hanoi(3,&quot;A&quot;,&quot;B&quot;,&quot;C&quot;);</code></p><p><img src="\postsource\java数据结构与算法\7\4.png" alt=""></p><h2 id="6-归并排序"><a href="#6-归并排序" class="headerlink" title="6. 归并排序"></a>6. 归并排序</h2><p>归并算法的核心是归并两个已经有序的数组。如下图所示：</p><p>​    <img src="\postsource\java数据结构与算法\7\5.png" alt=""></p><p>归并算法为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] sort(<span class="keyword">int</span>[] a,<span class="keyword">int</span>[] b)&#123;</span><br><span class="line">    <span class="keyword">int</span>[] c = <span class="keyword">new</span> <span class="keyword">int</span>[a.length+b.length];</span><br><span class="line">    <span class="keyword">int</span> aNum = <span class="number">0</span>,bNum = <span class="number">0</span>,cNum=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(aNum&lt;a.length &amp;&amp; bNum &lt; b.length)&#123;</span><br><span class="line">        <span class="keyword">if</span>(a[aNum] &gt;= b[bNum])&#123;<span class="comment">//比较a数组和b数组的元素，谁更小将谁赋值到c数组</span></span><br><span class="line">            c[cNum++] = b[bNum++];</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            c[cNum++] = a[aNum++];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//如果a数组全部赋值到c数组了，但是b数组还有元素，则将b数组剩余元素按顺序全部复制到c数组</span></span><br><span class="line">    <span class="keyword">while</span>(aNum == a.length &amp;&amp; bNum &lt; b.length)&#123;</span><br><span class="line">        c[cNum++] = b[bNum++];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//如果b数组全部赋值到c数组了，但是a数组还有元素，则将a数组剩余元素按顺序全部复制到c数组</span></span><br><span class="line">    <span class="keyword">while</span>(bNum == b.length &amp;&amp; aNum &lt; a.length)&#123;</span><br><span class="line">        c[cNum++] = a[aNum++];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    根据归并算法，我们可以对数组进行归并排序。把一个数组分成两半，排序每一半，然后用上面的归并算法合并。然后如何排序每一半呢？可以继续把每一半继续分成两半，排序每一半后合并。。。。如此继续下去，直至最后排序的为两个元素（即递归的边界条件），再往回回归即可完成归并排序。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] mergeSort(<span class="keyword">int</span>[] c,<span class="keyword">int</span> start,<span class="keyword">int</span> last)&#123;</span><br><span class="line">    <span class="keyword">if</span>(last &gt; start)&#123;</span><br><span class="line">        <span class="comment">//也可以是(start+last)/2，这样写是为了防止数组长度很大造成两者相加超过int范围，导致溢出</span></span><br><span class="line">        <span class="keyword">int</span> mid = start + (last - start)/<span class="number">2</span>;</span><br><span class="line">        mergeSort(c,start,mid);<span class="comment">//左边数组排序</span></span><br><span class="line">        mergeSort(c,mid+<span class="number">1</span>,last);<span class="comment">//右边数组排序</span></span><br><span class="line">        merge(c,start,mid,last);<span class="comment">//合并左右数组</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span>[] c,<span class="keyword">int</span> start,<span class="keyword">int</span> mid,<span class="keyword">int</span> last)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] temp = <span class="keyword">new</span> <span class="keyword">int</span>[last-start+<span class="number">1</span>];<span class="comment">//定义临时数组</span></span><br><span class="line">    <span class="keyword">int</span> i = start;<span class="comment">//定义左边数组的下标</span></span><br><span class="line">    <span class="keyword">int</span> j = mid + <span class="number">1</span>;<span class="comment">//定义右边数组的下标</span></span><br><span class="line">    <span class="keyword">int</span> k = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(i &lt;= mid &amp;&amp; j &lt;= last)&#123;</span><br><span class="line">        <span class="keyword">if</span>(c[i] &lt; c[j])&#123;</span><br><span class="line">            temp[k++] = c[i++];</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            temp[k++] = c[j++];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//把左边剩余数组元素移入新数组中</span></span><br><span class="line">    <span class="keyword">while</span>(i &lt;= mid)&#123;</span><br><span class="line">        temp[k++] = c[i++];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//把右边剩余数组元素移入到新数组中</span></span><br><span class="line">    <span class="keyword">while</span>(j &lt;= last)&#123;</span><br><span class="line">        temp[k++] = c[j++];</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="comment">//把新数组中的数覆盖到c数组中</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> k2 = <span class="number">0</span> ; k2 &lt; temp.length ; k2++)&#123;</span><br><span class="line">        c[k2+start] = temp[k2];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/placeholder.png" alt="" data-src="\postsource\java数据结构与算法\7\6.png" class="lazyload"></p>]]></content>
      
      <categories>
          
          <category> Java数据结构与算法学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java数据结构与算法 </tag>
            
            <tag> 递归 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Java数据结构与算法学习笔记——链表</title>
      <link href="/2018/08/07/java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/Java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B06%E2%80%94%E9%93%BE%E8%A1%A8/"/>
      <url>/2018/08/07/java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/Java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B06%E2%80%94%E9%93%BE%E8%A1%A8/</url>
      <content type="html"><![CDATA[<hr><p>​    通过之前的学习，了解到数组作为数据存储结构是有一定的缺陷的。在无序数组中，搜索性能差，在有序数组中，插入效率又很低，而且这两种数组的删除效率都很低，并且数组在创建后，其大小是固定了，设置的过大会造成内存的浪费，过小又不能满足数据量的存储。 </p><p>​    所以在此引入一种新型的数据结构——链表，链表和数组一样也是一种使用广泛的通用数据结构，链表是一种物理存储单元上非连续、非顺序的存储结构，数据元素的逻辑顺序是通过链表中的指针链接次序实现的。链表由一系列结点（链表中每一个元素称为结点）组成，结点可以在运行时动态生成。每个结点包括两个部分：一个是存储数据元素的数据域，另一个是存储下一个结点地址的指针域。 </p><p>​    使用链表结构可以克服数组链表需要预先知道数据大小的缺点，链表结构可以充分利用计算机内存空间，实现灵活的内存动态管理。 但是链表失去了数组随机读取的优点，同时由于增加了结点的指针域，空间开销比较大。<a id="more"></a></p><h2 id="1-单向链表"><a href="#1-单向链表" class="headerlink" title="1. 单向链表"></a>1. 单向链表</h2><p>​    单链表是链表中结构最简单的。一个单链表的节点(Node)分为两个部分，第一个部分(data)保存或者显示关于节点的信息，另一个部分存储下一个节点的地址。最后一个节点存储地址的部分指向空值。 </p><p>​    单向链表只可向一个方向遍历，一般查找一个节点的时候需要从第一个节点开始每次访问下一个节点，一直访问到需要的位置。而插入一个节点，对于单向链表，我们只提供在链表头插入，只需要将当前插入的节点设置为头节点，next指向原头节点即可。删除一个节点，我们将该节点的上一个节点的next指向该节点的下一个节点。 </p><p><img src="\postsource\java数据结构与算法\6\1.png" alt=""></p><p>在标头增加节点：</p><p><img src="\postsource\java数据结构与算法\6\2.png" alt=""></p><p>删除节点：</p><p><img src="\postsource\java数据结构与算法\6\3.png" alt=""></p><h3 id="单向链表的代码实现："><a href="#单向链表的代码实现：" class="headerlink" title="单向链表的代码实现："></a>单向链表的代码实现：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingleLinkedList</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> size;<span class="comment">//链表节点的个数</span></span><br><span class="line">    <span class="keyword">private</span> Node head;<span class="comment">//头节点</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SingleLinkedList</span><span class="params">()</span></span>&#123;</span><br><span class="line">        size = <span class="number">0</span>;</span><br><span class="line">        head = <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//链表的每个节点类</span></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span></span>&#123;</span><br><span class="line">        <span class="keyword">private</span> Object data;<span class="comment">//每个节点的数据</span></span><br><span class="line">        <span class="keyword">private</span> Node next;<span class="comment">//每个节点指向下一个节点的连接</span></span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(Object data)</span></span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.data = data;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//在链表头添加元素</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">addHead</span><span class="params">(Object obj)</span></span>&#123;</span><br><span class="line">        Node newHead = <span class="keyword">new</span> Node(obj);</span><br><span class="line">        <span class="keyword">if</span>(size == <span class="number">0</span>)&#123;</span><br><span class="line">            head = newHead;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            newHead.next = head;</span><br><span class="line">            head = newHead;</span><br><span class="line">        &#125;</span><br><span class="line">        size++;</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//在链表头删除元素</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">deleteHead</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Object obj = head.data;</span><br><span class="line">        head = head.next;</span><br><span class="line">        size--;</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//查找指定元素，找到了返回节点Node，找不到返回null</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Node <span class="title">find</span><span class="params">(Object obj)</span></span>&#123;</span><br><span class="line">        Node current = head;</span><br><span class="line">        <span class="keyword">int</span> tempSize = size;</span><br><span class="line">        <span class="keyword">while</span>(tempSize &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(obj.equals(current.data))&#123;</span><br><span class="line">                <span class="keyword">return</span> current;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                current = current.next;</span><br><span class="line">            &#125;</span><br><span class="line">            tempSize--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//删除指定的元素，删除成功返回true</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">delete</span><span class="params">(Object value)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(size == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Node current = head;</span><br><span class="line">        Node previous = head;</span><br><span class="line">        <span class="keyword">while</span>(current.data != value)&#123;</span><br><span class="line">            <span class="keyword">if</span>(current.next == <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                previous = current;</span><br><span class="line">                current = current.next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如果删除的节点是第一个节点</span></span><br><span class="line">        <span class="keyword">if</span>(current == head)&#123;</span><br><span class="line">            head = current.next;</span><br><span class="line">            size--;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;<span class="comment">//删除的节点不是第一个节点</span></span><br><span class="line">            previous.next = current.next;</span><br><span class="line">            size--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//判断链表是否为空</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (size == <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//显示节点信息</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(size &gt;<span class="number">0</span>)&#123;</span><br><span class="line">            Node node = head;</span><br><span class="line">            <span class="keyword">int</span> tempSize = size;</span><br><span class="line">            <span class="keyword">if</span>(tempSize == <span class="number">1</span>)&#123;<span class="comment">//当前链表只有一个节点</span></span><br><span class="line">                System.out.println(<span class="string">"["</span>+node.data+<span class="string">"]"</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span>(tempSize&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(node.equals(head))&#123;</span><br><span class="line">                    System.out.print(<span class="string">"["</span>+node.data+<span class="string">"-&gt;"</span>);</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(node.next == <span class="keyword">null</span>)&#123;</span><br><span class="line">                    System.out.print(node.data+<span class="string">"]"</span>);</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    System.out.print(node.data+<span class="string">"-&gt;"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                node = node.next;</span><br><span class="line">                tempSize--;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;<span class="comment">//如果链表一个节点都没有，直接打印[]</span></span><br><span class="line">            System.out.println(<span class="string">"[]"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="用单向链表实现栈"><a href="#用单向链表实现栈" class="headerlink" title="用单向链表实现栈"></a>用单向链表实现栈</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StackSingleLink</span> </span>&#123;</span><br><span class="line">    <span class="comment">//栈的pop()方法和push()方法，对应只要实现链表的deleteHead()及addHead()即可。</span></span><br><span class="line">    <span class="keyword">private</span> SingleLinkedList link;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">StackSingleLink</span><span class="params">()</span></span>&#123;</span><br><span class="line">        link = <span class="keyword">new</span> SingleLinkedList();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//添加元素</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(Object obj)</span></span>&#123;</span><br><span class="line">        link.addHead(obj);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//移除栈顶元素</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">pop</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Object obj = link.deleteHead();</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//判断是否为空</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> link.isEmpty();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//打印栈内元素信息</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span></span>&#123;</span><br><span class="line">        link.display();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-双端链表"><a href="#2-双端链表" class="headerlink" title="2. 双端链表"></a>2. 双端链表</h2><p>​    对于单向链表，我们如果想在尾部添加一个节点，必须从头到尾一直遍历，然后在尾节点后插入一个节点。这样操作很麻烦，那么我们在设计链表时可以加一个对尾节点的引用。</p><p><img src="\postsource\java数据结构与算法\6\4.png" alt=""></p><p><strong>双端链表的具体实现</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DoublePointLinkedList</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Node head;<span class="comment">//头节点</span></span><br><span class="line">    <span class="keyword">private</span> Node tail;<span class="comment">//尾节点</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> size;<span class="comment">//节点的个数</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span></span>&#123;</span><br><span class="line">        <span class="keyword">private</span> Object data;</span><br><span class="line">        <span class="keyword">private</span> Node next;</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(Object data)</span></span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.data = data;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DoublePointLinkedList</span><span class="params">()</span></span>&#123;</span><br><span class="line">        size = <span class="number">0</span>;</span><br><span class="line">        head = <span class="keyword">null</span>;</span><br><span class="line">        tail = <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//链表头新增节点</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addHead</span><span class="params">(Object data)</span></span>&#123;</span><br><span class="line">        Node node = <span class="keyword">new</span> Node(data);</span><br><span class="line">        <span class="keyword">if</span>(size == <span class="number">0</span>)&#123;<span class="comment">//如果链表为空，那么头节点和尾节点都是该新增节点</span></span><br><span class="line">            head = node;</span><br><span class="line">            tail = node;</span><br><span class="line">            size++;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            node.next = head;</span><br><span class="line">            head = node;</span><br><span class="line">            size++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//链表尾新增节点</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addTail</span><span class="params">(Object data)</span></span>&#123;</span><br><span class="line">        Node node = <span class="keyword">new</span> Node(data);</span><br><span class="line">        <span class="keyword">if</span>(size == <span class="number">0</span>)&#123;<span class="comment">//如果链表为空，那么头节点和尾节点都是该新增节点</span></span><br><span class="line">            head = node;</span><br><span class="line">            tail = node;</span><br><span class="line">            size++;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            tail.next = node;</span><br><span class="line">            tail = node;</span><br><span class="line">            size++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//删除头部节点，成功返回true，失败返回false</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">deleteHead</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(size == <span class="number">0</span>)&#123;<span class="comment">//当前链表节点数为0</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(head.next == <span class="keyword">null</span>)&#123;<span class="comment">//当前链表节点数为1</span></span><br><span class="line">            head = <span class="keyword">null</span>;</span><br><span class="line">            tail = <span class="keyword">null</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            head = head.next;</span><br><span class="line">        &#125;</span><br><span class="line">        size--;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//判断是否为空</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (size ==<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//获得链表的节点个数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getSize</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//显示节点信息</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(size &gt;<span class="number">0</span>)&#123;</span><br><span class="line">            Node node = head;</span><br><span class="line">            <span class="keyword">int</span> tempSize = size;</span><br><span class="line">            <span class="keyword">if</span>(tempSize == <span class="number">1</span>)&#123;<span class="comment">//当前链表只有一个节点</span></span><br><span class="line">                System.out.println(<span class="string">"["</span>+node.data+<span class="string">"]"</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span>(tempSize&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(node.equals(head))&#123;</span><br><span class="line">                    System.out.print(<span class="string">"["</span>+node.data+<span class="string">"-&gt;"</span>);</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(node.next == <span class="keyword">null</span>)&#123;</span><br><span class="line">                    System.out.print(node.data+<span class="string">"]"</span>);</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    System.out.print(node.data+<span class="string">"-&gt;"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                node = node.next;</span><br><span class="line">                tempSize--;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;<span class="comment">//如果链表一个节点都没有，直接打印[]</span></span><br><span class="line">            System.out.println(<span class="string">"[]"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    可以利用双端链表实现队列，只需只实现双端链表的尾部新增节点和头部删除节点即成为队列。</p><h2 id="3-有序链表"><a href="#3-有序链表" class="headerlink" title="3. 有序链表"></a>3. 有序链表</h2><p>​                    <img src="\postsource\java数据结构与算法\6\5.png" alt=""></p><p>​    前面的链表实现插入都是无序的，在有些应用中需要链表中的数据有序，这称为有序链表。</p><p>​    在有序链表中，数据是按照关键值有序排列的。一般在大多数需要使用有序数组的场合也可以使用有序链表。有序链表优于有序数组的地方是插入的速度(因为不需要移动元素)，另外链表可以更有效的使用内存，而数组只能是固定大小。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderLinkedList</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Node head;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span></span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> data;</span><br><span class="line">        <span class="keyword">private</span> Node next;</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(<span class="keyword">int</span> data)</span></span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.data = data;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">OrderLinkedList</span><span class="params">()</span></span>&#123;</span><br><span class="line">        head = <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//插入节点，并按照从小打到的顺序排列</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> value)</span></span>&#123;</span><br><span class="line">        Node node = <span class="keyword">new</span> Node(value);</span><br><span class="line">        Node pre = <span class="keyword">null</span>;</span><br><span class="line">        Node current = head;</span><br><span class="line">        <span class="keyword">while</span>(current != <span class="keyword">null</span> &amp;&amp; value &gt; current.data)&#123;</span><br><span class="line">            pre = current;</span><br><span class="line">            current = current.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(pre == <span class="keyword">null</span>)&#123;</span><br><span class="line">            head = node;</span><br><span class="line">            head.next = current;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            pre.next = node;</span><br><span class="line">            node.next = current;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//删除头节点 删除的是最小的值</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteHead</span><span class="params">()</span></span>&#123;</span><br><span class="line">        head = head.next;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Node current = head;</span><br><span class="line">        <span class="keyword">while</span>(current != <span class="keyword">null</span>)&#123;</span><br><span class="line">            System.out.print(current.data+<span class="string">" "</span>);</span><br><span class="line">            current = current.next;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">""</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    在有序链表中插入和删除某一项最多需要$O(N)$次比较，平均需要$O(N/2)$次，因为必须沿着链表上一步一步走才能找到正确的插入位置，然而可以最快速度删除最值，因为只需要删除表头即可，如果一个应用需要频繁的存取最小值，且不需要快速的插入，那么有序链表是一个比较好的选择方案。比如优先级队列可以使用有序链表来实现。 </p><h2 id="4-有序链表和无序数组排序"><a href="#4-有序链表和无序数组排序" class="headerlink" title="4. 有序链表和无序数组排序"></a>4. 有序链表和无序数组排序</h2><p>​    比如有一个无序数组需要排序，前面我们在讲解冒泡排序、选择排序、插入排序这三种简单的排序时，需要的时间级别都是O(N2)。</p><p>　　现在我们讲解了有序链表之后，对于一个无序数组，我们先将数组元素取出，一个一个的插入到有序链表中，然后将他们从有序链表中一个一个删除，重新放入数组，那么数组就会排好序了。和插入排序一样，如果插入了N个新数据，那么进行大概N2/4次比较。但是相对于插入排序，每个元素只进行了两次排序，一次从数组到链表，一次从链表到数组，大概需要2*N次移动，而插入排序则需要N2次移动，</p><p>　　效率肯定是比前面讲的简单排序要高，但是缺点就是需要开辟差不多两倍的空间，而且数组和链表必须在内存中同时存在，如果有现成的链表可以用，那么这种方法还是挺好的。</p><h2 id="5-双向链表"><a href="#5-双向链表" class="headerlink" title="5. 双向链表"></a>5. 双向链表</h2><p>​    我们知道之前的链表只能从一个方向遍历，那么双向链表可以从两个方向遍历，分析可知，只需在每个节点Node上加上prev指向上一个变量。</p><p><img src="/images/placeholder.png" alt="" data-src="\postsource\java数据结构与算法\6\6.png" class="lazyload"></p><p>具体代码实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TwoWayLinkedList</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Node head;<span class="comment">//表示链表头</span></span><br><span class="line">    <span class="keyword">private</span> Node tail;<span class="comment">//表示链表尾</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> size;<span class="comment">//表示链表的节点个数</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span></span>&#123;</span><br><span class="line">        <span class="keyword">private</span> Object data;</span><br><span class="line">        <span class="keyword">private</span> Node next;</span><br><span class="line">        <span class="keyword">private</span> Node prev;</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(Object data)</span></span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.data = data;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TwoWayLinkedList</span><span class="params">()</span></span>&#123;</span><br><span class="line">        size = <span class="number">0</span>;</span><br><span class="line">        head = <span class="keyword">null</span>;</span><br><span class="line">        tail = <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//在链表头增加节点</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addHead</span><span class="params">(Object value)</span></span>&#123;</span><br><span class="line">        Node newNode = <span class="keyword">new</span> Node(value);</span><br><span class="line">        <span class="keyword">if</span>(size == <span class="number">0</span>)&#123;</span><br><span class="line">            head = newNode;</span><br><span class="line">            tail = newNode;</span><br><span class="line">            size++;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            head.prev = newNode;</span><br><span class="line">            newNode.next = head;</span><br><span class="line">            head = newNode;</span><br><span class="line">            size++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//在链表尾增加节点</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addTail</span><span class="params">(Object value)</span></span>&#123;</span><br><span class="line">        Node newNode = <span class="keyword">new</span> Node(value);</span><br><span class="line">        <span class="keyword">if</span>(size == <span class="number">0</span>)&#123;</span><br><span class="line">            head = newNode;</span><br><span class="line">            tail = newNode;</span><br><span class="line">            size++;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            newNode.prev = tail;</span><br><span class="line">            tail.next = newNode;</span><br><span class="line">            tail = newNode;</span><br><span class="line">            size++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//删除链表头</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Node <span class="title">deleteHead</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Node temp = head;</span><br><span class="line">        <span class="keyword">if</span>(size != <span class="number">0</span>)&#123;</span><br><span class="line">            head = head.next;</span><br><span class="line">            head.prev = <span class="keyword">null</span>;</span><br><span class="line">            size--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> temp;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//删除链表尾</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Node <span class="title">deleteTail</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Node temp = tail;</span><br><span class="line">        <span class="keyword">if</span>(size != <span class="number">0</span>)&#123;</span><br><span class="line">            tail = tail.prev;</span><br><span class="line">            tail.next = <span class="keyword">null</span>;</span><br><span class="line">            size--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> temp;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//获得链表的节点个数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getSize</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//判断链表是否为空</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (size == <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-抽象数据类型"><a href="#6-抽象数据类型" class="headerlink" title="6. 抽象数据类型"></a>6. 抽象数据类型</h2><p>​    在介绍抽象数据类型的时候，我们先看看什么是数据类型，听到这个词，在Java中我们可能首先会想到像 int,double这样的词，这是Java中的基本数据类型，一个数据类型会涉及到两件事：</p><p>　　①、拥有特定特征的数据项</p><p>　　②、在数据上允许的操作</p><p>　　比如Java中的int数据类型，它表示整数，取值范围为：-2147483648~2147483647，还能使用各种操作符，+、-、*、/ 等对其操作。数据类型允许的操作是它本身不可分离的部分，理解类型包括理解什么样的操作可以应用在该类型上。</p><p>　　那么当年设计计算机语言的人，为什么会考虑到数据类型？</p><p>　　我们先看这样一个例子，比如，大家都需要住房子，也都希望房子越大越好。但显然，没有钱，考虑房子没有意义。于是就出现了各种各样的商品房，有别墅的、复式的、错层的、单间的……甚至只有两平米的胶囊房间。这样做的意义是满足不同人的需要。</p><p>　　同样，在计算机中，也存在相同的问题。计算1+1这样的表达式不需要开辟很大的存储空间，不需要适合小数甚至字符运算的内存空间。于是计算机的研究者们就考虑，要对数据进行分类，分出来多种数据类型。比如int，比如float。</p><p>　　虽然不同的计算机有不同的硬件系统，但实际上高级语言编写者才不管程序运行在什么计算机上，他们的目的就是为了实现整形数字的运算，比如a+b等。他们才不关心整数在计算机内部是如何表示的，也不管CPU是如何计算的。于是我们就考虑，无论什么计算机、什么语言都会面临类似的整数运算，我们可以考虑将其抽象出来。抽象是抽取出事物具有的普遍性本质，是对事物的一个概括，是一种思考问题的方式。</p><p>　　<strong>抽象数据类型（ADT）是指一个数学模型及定义在该模型上的一组操作。</strong>它仅取决于其逻辑特征，而与计算机内部如何表示和实现无关。比如刚才说得整型，各个计算机，不管大型机、小型机、PC、平板电脑甚至智能手机，都有“整型”类型，也需要整形运算，那么整型其实就是一个抽象数据类型。 　</p><p>　　更广泛一点的，比如我们刚讲解的栈和队列这两种数据结构，我们分别使用了数组和链表来实现，比如栈，对于使用者只需要知道pop()和push()方法或其它方法的存在以及如何使用即可，使用者不需要知道我们是使用的数组或是链表来实现的。</p><p>　　ADT的思想可以作为我们设计工具的理念，比如我们需要存储数据，那么就从考虑需要在数据上实现的操作开始，需要存取最后一个数据项吗？还是第一个？还是特定值的项？还是特定位置的项？回答这些问题会引出ADT的定义，只有完整的定义了ADT后，才应该考虑实现的细节。</p><p>　　这在我们Java语言中的接口设计理念是想通的。</p><h2 id="7-总结"><a href="#7-总结" class="headerlink" title="7. 总结"></a>7. 总结</h2><p>​    上面我们讲了各种链表，每个链表都包括一个LinikedList对象和许多Node对象，LinkedList对象通常包含头和尾节点的引用，分别指向链表的第一个节点和最后一个节点。而每个节点对象通常包含数据部分data，以及对上一个节点的引用prev和下一个节点的引用next，只有下一个节点的引用称为单向链表，两个都有的称为双向链表。next值为null则说明是链表的结尾，如果想找到某个节点，我们必须从第一个节点开始遍历，不断通过next找到下一个节点，直到找到所需要的。栈和队列都是ADT，可以用数组来实现，也可以用链表实现。 </p>]]></content>
      
      <categories>
          
          <category> Java数据结构与算法学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java数据结构与算法 </tag>
            
            <tag> 链表 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Java数据结构与算法学习笔记——队列</title>
      <link href="/2018/08/03/java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/Java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B05%E2%80%94%E9%98%9F%E5%88%97/"/>
      <url>/2018/08/03/java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/Java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B05%E2%80%94%E9%98%9F%E5%88%97/</url>
      <content type="html"><![CDATA[<hr><p>​    本篇博客我们介绍另外一种作为构思算法的辅助工具的数据结构——队列。栈是后进先出，而队列则正好相反，是先进先出，类似网游进游戏时需要排队等待的情况。<a id="more"></a></p><h2 id="1-队列的基本概念"><a href="#1-队列的基本概念" class="headerlink" title="1. 队列的基本概念"></a>1. 队列的基本概念</h2><p>​    队列(queue)是一种特殊的<a href="https://baike.baidu.com/item/%E7%BA%BF%E6%80%A7%E8%A1%A8" target="_blank" rel="noopener">线性表</a>，特殊之处在于它只允许在表的前端（front）进行删除操作，而在表的后端（rear）进行插入操作，和栈一样，队列是一种操作受限制的线性表。进行插入操作的端称为队尾，进行删除操作的端称为队头。其存取元素遵循先进先出原则（FIFO,First Input First OutPut）</p><p>​    队列细分又分为<strong>单向队列</strong>(Queue 只在一端插入数据，另一端删除)，<strong>双向队列(</strong>Deque 每一段都可以进行插入删除)，<strong>优先级队列</strong>(Priority queue 每个元素都有一个优先权，一般情况下，查找操作用来搜索优先权最大的元素，删除操作用来删除该元素 。对于优先权相同的元素，可按先进先出次序处理或按任意优先权进行  )，下面我们先介绍单向队列：</p><h2 id="２-Java模拟单向队列的实现"><a href="#２-Java模拟单向队列的实现" class="headerlink" title="２. Java模拟单向队列的实现"></a>２. Java模拟单向队列的实现</h2><p>​    我们假设一个队列有n个元素，则顺序存储的队列需建立一个大于n的数组，并把队列的所有元素存储在数组的前n个单元，数组下标为0的一端即是队头。所谓的入队列操作，其实就是在队尾追加一个元素，不需要移动任何元素，因此时间复杂度为$O(1)$。</p><p>​    与栈不同的是，队列元素的出列是在队头，即下标为0的位置，那也就意味着，队列中的所有元素都得向前移动，以保证队列的队头（也就是下标为0的位置）不为空，此时的时间复杂度为$O(n)$。<br>            <img src="\postsource\java数据结构与算法\5\1.jpg" alt=""></p><p>​    这样设计显然是不合理的，我们为什么要固定队头的位置去平移数组呢？为什么不变更出队的位置呢？所以引入两个指针，front和rear指针，入队时rear向后移，出队时front指针也向后移动，这样出队操作的时间复杂度也为$O(1)$。<br>            <img src="\postsource\java数据结构与算法\5\2.jpg" alt=""></p><p>​    那么当这个队列rear指针超出范围时，这个数组明明还有空余我们就说它溢出了这对内存是一种浪费，所以引入循环队列的概念，后面满了，我们就从头开始，组成一个首尾相接的循环。<br>            <img src="\postsource\java数据结构与算法\5\3.jpg" alt=""></p><p>​            <img src="\postsource\java数据结构与算法\5\4.jpg" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> array;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyQueue</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Object[] queArray;</span><br><span class="line">    <span class="comment">//队列总大小</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> maxSize;</span><br><span class="line">    <span class="comment">//前端</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> front;</span><br><span class="line">    <span class="comment">//后端</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> rear;</span><br><span class="line">    <span class="comment">//队列中元素的实际数目</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> nItems;</span><br><span class="line">     </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyQueue</span><span class="params">(<span class="keyword">int</span> s)</span></span>&#123;</span><br><span class="line">        maxSize = s;</span><br><span class="line">        queArray = <span class="keyword">new</span> Object[maxSize];</span><br><span class="line">        front = <span class="number">0</span>;</span><br><span class="line">        rear = -<span class="number">1</span>;</span><br><span class="line">        nItems = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="comment">//队列中新增数据</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> value)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(isFull())&#123;</span><br><span class="line">            System.out.println(<span class="string">"队列已满！！！"</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//如果队列尾部指向顶了，那么循环回来，执行队列的第一个元素</span></span><br><span class="line">            <span class="keyword">if</span>(rear == maxSize -<span class="number">1</span>)&#123;</span><br><span class="line">                rear = -<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//队尾指针加1，然后在队尾指针处插入新的数据</span></span><br><span class="line">            queArray[++rear] = value;</span><br><span class="line">            nItems++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="comment">//移除数据</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">remove</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Object removeValue = <span class="keyword">null</span> ;</span><br><span class="line">        <span class="keyword">if</span>(!isEmpty())&#123;</span><br><span class="line">            removeValue = queArray[front];</span><br><span class="line">            queArray[front] = <span class="keyword">null</span>;</span><br><span class="line">            front++;</span><br><span class="line">            <span class="keyword">if</span>(front == maxSize)&#123;</span><br><span class="line">                front = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            nItems--;</span><br><span class="line">            <span class="keyword">return</span> removeValue;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> removeValue;</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="comment">//查看对头数据</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">peekFront</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> queArray[front];</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">     </span><br><span class="line">    <span class="comment">//判断队列是否满了</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isFull</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (nItems == maxSize);</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="comment">//判断队列是否为空</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (nItems ==<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="comment">//返回队列的大小</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getSize</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> nItems;</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        MyQueue queue = <span class="keyword">new</span> MyQueue(<span class="number">3</span>);</span><br><span class="line">        queue.insert(<span class="number">1</span>);</span><br><span class="line">        queue.insert(<span class="number">2</span>);</span><br><span class="line">        queue.insert(<span class="number">3</span>);</span><br><span class="line">        System.out.println(Arrays.toString(queue.queArray));</span><br><span class="line">        System.out.println(queue.peekFront()); <span class="comment">//1</span></span><br><span class="line">        queue.remove();</span><br><span class="line">        System.out.println(Arrays.toString(queue.queArray));</span><br><span class="line">        System.out.println(queue.peekFront()); <span class="comment">//2</span></span><br><span class="line"></span><br><span class="line">        queue.insert(<span class="number">4</span>);</span><br><span class="line">        queue.insert(<span class="number">5</span>);</span><br><span class="line">        System.out.println(Arrays.toString(queue.queArray));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><blockquote><p>结果：<img src="\postsource\java数据结构与算法\5\5.png" alt=""></p></blockquote><h2 id="3-双端队列"><a href="#3-双端队列" class="headerlink" title="3. 双端队列"></a>3. 双端队列</h2><p>​    双端队列就是一个两端都是结尾或者开头的队列， 队列的每一端都可以进行插入数据项和移除数据项 。</p><p>​    如果严格禁止某一端的操作，其功能就和栈一样。</p><p>​    如果严格禁止offerFirst()和pollLast() 或相反的另一对方法，那么双端队列就和单向队列一样了。</p><h2 id="4-优先级队列"><a href="#4-优先级队列" class="headerlink" title="4. 优先级队列"></a>4. 优先级队列</h2><p>​    我们用int数组来实现优先级队列，根据之前的介绍，我们就用int数值的大小来定义其优先级，越小的元素优先级越高，在插入的时候按照由大到小进行排序。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> array;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PriorityQue</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> maxSize;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] priQueArray;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> nItems;</span><br><span class="line">     </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PriorityQue</span><span class="params">(<span class="keyword">int</span> s)</span></span>&#123;</span><br><span class="line">        maxSize = s;</span><br><span class="line">        priQueArray = <span class="keyword">new</span> <span class="keyword">int</span>[maxSize];</span><br><span class="line">        nItems = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="comment">//插入数据</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> value)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (isFull())&#123;</span><br><span class="line">            System.out.println(<span class="string">"队列已满！"</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> j;</span><br><span class="line">        <span class="keyword">if</span>(nItems == <span class="number">0</span>)&#123;</span><br><span class="line">            priQueArray[nItems++] = value;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            j = nItems -<span class="number">1</span>;</span><br><span class="line">            <span class="comment">//选择的排序方法是插入排序，按照从大到小的顺序排列，越小的越在队列的顶端</span></span><br><span class="line">            <span class="keyword">while</span>(j &gt;=<span class="number">0</span> &amp;&amp; value &gt; priQueArray[j])&#123;</span><br><span class="line">                priQueArray[j+<span class="number">1</span>] = priQueArray[j];</span><br><span class="line">                j--;</span><br><span class="line">            &#125;</span><br><span class="line">            priQueArray[j+<span class="number">1</span>] = value;</span><br><span class="line">            nItems++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="comment">//移除数据,由于是按照大小排序的，所以移除数据我们指针向下移动</span></span><br><span class="line">    <span class="comment">//被移除的地方由于是int类型的，不能设置为null，这里的做法是设置为 -1</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">remove</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (isEmpty())&#123;</span><br><span class="line">            System.out.println(<span class="string">"没有可以移除的了"</span>);</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> k = nItems -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> value = priQueArray[k];</span><br><span class="line">        priQueArray[k] = -<span class="number">1</span>;<span class="comment">//-1表示这个位置的数据被移除了</span></span><br><span class="line">        nItems--;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="comment">//查看优先级最高的元素</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">peekMin</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> priQueArray[nItems-<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="comment">//判断是否为空</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (nItems == <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="comment">//判断是否满了</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isFull</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (nItems == maxSize);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>其插入操作的时间复杂度为$O(N)$ ，其他操作时间复杂度为$O(1)$ ，用数组实现的优先级队列适用于数据量比较小且不注重插入速度的场合。</p></blockquote><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        PriorityQue pq = <span class="keyword">new</span> PriorityQue(<span class="number">4</span>);</span><br><span class="line">        pq.insert(<span class="number">5</span>);</span><br><span class="line">        pq.insert(<span class="number">6</span>);</span><br><span class="line">        System.out.println(Arrays.toString(pq.priQueArray));</span><br><span class="line">        pq.insert(<span class="number">3</span>);</span><br><span class="line">        System.out.println(Arrays.toString(pq.priQueArray));</span><br><span class="line">        pq.insert(<span class="number">4</span>);</span><br><span class="line">        System.out.println(Arrays.toString(pq.priQueArray));</span><br><span class="line">        System.out.println(pq.remove());</span><br><span class="line">        System.out.println(Arrays.toString(pq.priQueArray));</span><br><span class="line">        pq.insert(<span class="number">7</span>);</span><br><span class="line">        System.out.println(Arrays.toString(pq.priQueArray));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><blockquote><p>结果： <img src="/images/placeholder.png" alt="" data-src="\postsource\java数据结构与算法\5\6.png" class="lazyload"></p></blockquote><h2 id="5-总结"><a href="#5-总结" class="headerlink" title="5. 总结"></a>5. 总结</h2><ul><li>栈、队列（单向队列）、优先级队列通常是用来简化某些程序操作的数据结构，而不是主要作为存储数据的。 </li><li>优先级队列是有序的插入数据，并且只能访问当前元素中优先级别最大（或最小）的元素。 </li><li>使用数组实现的队列都会面临着溢出的问题，之后我们会学习不需要担心队列长度的链式存储结构。</li></ul>]]></content>
      
      <categories>
          
          <category> Java数据结构与算法学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java数据结构与算法 </tag>
            
            <tag> 队列 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Java数据结构与算法学习笔记——栈</title>
      <link href="/2018/08/02/java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/Java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B04%E2%80%94%E6%A0%88/"/>
      <url>/2018/08/02/java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/Java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B04%E2%80%94%E6%A0%88/</url>
      <content type="html"><![CDATA[<hr><p>​    有些数据结构并不像数组一样完全作为一种数据存储工具，而更多的是作为程序员的工具，作为一种构思算法的辅助工具。这些数据结构的生命周期比数据库类型的结构要短得多，在程序执行期间它们才被创建，通常用它们去执行某项特殊的业务，执行完成之后，它们就被销毁。这里的它们就是——栈和队列。尽管很多高级语言，比如java，对常用数据结构都有封装，我们不用关注其细节直接使用即可，但这与我们正常的学习过程相违背，以后不做赘述。本篇博客我们先介绍栈。 <a id="more"></a></p><h2 id="1-栈的基本概念"><a href="#1-栈的基本概念" class="headerlink" title="1. 栈的基本概念"></a>1. 栈的基本概念</h2><p>​    栈（stack）又名<strong>堆栈</strong>，它是一种运算受限的线性表。其限制是仅允许在表的一端进行插入和删除运算。这一端被称为栈顶(top)，相对地，把另一端称为栈底(bottom)。向一个栈插入新元素又称作进栈、入栈或压栈(push)，它是把新元素放到栈顶元素的上面，使之成为新的栈顶元素；从一个栈删除元素又称作出栈或退栈(pop)，它是把栈顶元素删除掉，使其相邻的元素成为新的栈顶元素。 </p><p>​    由于堆叠数据结构只允许在一端进行操作，因而按照后进先出（LIFO, Last In First Out）的原理运作。栈也称为后进先出表。 可以类比羽毛球筒。</p><h2 id="2-Java代码的实现"><a href="#2-Java代码的实现" class="headerlink" title="2. Java代码的实现"></a>2. Java代码的实现</h2><blockquote><p>JDK在java.util.Stack包下完成了栈的实现，其api如下：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Stack stack=<span class="keyword">new</span> Stack();</span><br><span class="line">stack.empty(); <span class="comment">//判断是否为空</span></span><br><span class="line">stack.push(Object); <span class="comment">//进栈</span></span><br><span class="line">stack.pop();<span class="comment">//出栈,并返回改对象</span></span><br><span class="line">stack.peek();<span class="comment">//取栈顶值（不出栈）</span></span><br></pre></td></tr></table></figure><p>下面我们用数组来实现简单的顺序栈：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> array;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.EmptyStackException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayStack</span> </span>&#123;</span><br><span class="line">    <span class="comment">//存储元素的数组,声明为Object类型能存储任意类型的数据</span></span><br><span class="line">    <span class="keyword">private</span> Object[] elementData;</span><br><span class="line">    <span class="comment">//指向栈顶的指针</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> top;</span><br><span class="line">    <span class="comment">//栈的总容量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> size;</span><br><span class="line">     </span><br><span class="line">     </span><br><span class="line">    <span class="comment">//默认构造一个容量为10的栈</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ArrayStack</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.elementData = <span class="keyword">new</span> Object[<span class="number">10</span>];</span><br><span class="line">        <span class="keyword">this</span>.top = -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">this</span>.size = <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ArrayStack</span><span class="params">(<span class="keyword">int</span> initialCapacity)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(initialCapacity &lt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"栈初始容量不能小于0: "</span>+initialCapacity);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.elementData = <span class="keyword">new</span> Object[initialCapacity];</span><br><span class="line">        <span class="keyword">this</span>.top = -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">this</span>.size = initialCapacity;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"ArrayStack&#123;"</span> +</span><br><span class="line">                <span class="string">"elementData="</span> + Arrays.toString(elementData) +</span><br><span class="line">                <span class="string">", top="</span> + top +</span><br><span class="line">                <span class="string">", size="</span> + size +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//压入元素</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">push</span><span class="params">(Object item)</span></span>&#123;</span><br><span class="line">        <span class="comment">//是否需要扩容</span></span><br><span class="line">        isGrow(top+<span class="number">1</span>);</span><br><span class="line">        elementData[++top] = item;</span><br><span class="line">        <span class="keyword">return</span> item;</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="comment">//弹出栈顶元素</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">pop</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Object obj = peek();</span><br><span class="line">        remove(top);</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="comment">//获取栈顶元素</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">peek</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(top == -<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> EmptyStackException();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> elementData[top];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//判断栈是否为空</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (top == -<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="comment">//删除栈顶元素</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(<span class="keyword">int</span> top)</span></span>&#123;</span><br><span class="line">        <span class="comment">//栈顶元素置为null</span></span><br><span class="line">        elementData[top] = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">this</span>.top--;</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是否需要扩容，如果需要，则扩大一倍并返回true，不需要则返回false</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> minCapacity</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isGrow</span><span class="params">(<span class="keyword">int</span> minCapacity)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> oldCapacity = size;</span><br><span class="line">        <span class="comment">//如果当前元素压入栈之后总容量大于前面定义的容量，则需要扩容</span></span><br><span class="line">        <span class="keyword">if</span>(minCapacity &gt;= oldCapacity)&#123;</span><br><span class="line">            <span class="comment">//定义扩大之后栈的总容量</span></span><br><span class="line">            <span class="keyword">int</span> newCapacity = <span class="number">0</span>;</span><br><span class="line">            <span class="comment">//栈容量扩大两倍(左移一位)看是否超过int类型所表示的最大范围</span></span><br><span class="line">            <span class="keyword">if</span>((oldCapacity&lt;&lt;<span class="number">1</span>) - Integer.MAX_VALUE &gt;<span class="number">0</span>)&#123;</span><br><span class="line">                newCapacity = Integer.MAX_VALUE;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                newCapacity = (oldCapacity&lt;&lt;<span class="number">1</span>);<span class="comment">//长度*2</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">this</span>.size = newCapacity;</span><br><span class="line">            elementData = Arrays.copyOf(elementData, size);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">         ArrayStack stack = <span class="keyword">new</span> ArrayStack(<span class="number">2</span>);</span><br><span class="line">         System.out.println(stack);</span><br><span class="line">         stack.push(<span class="number">1</span>);</span><br><span class="line">         stack.push(<span class="number">2</span>);</span><br><span class="line">         System.out.println(stack);</span><br><span class="line">         stack.push(<span class="number">3</span>);</span><br><span class="line">         System.out.println(stack);</span><br><span class="line">         stack.pop();</span><br><span class="line">         System.out.println(stack);</span><br><span class="line">         System.out.println(stack.peek());</span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure><blockquote><p>结果：</p><p><img src="\postsource\java数据结构与算法\4\arrayStackResult.png" alt=""></p></blockquote><h2 id="3-利用栈实现字符串逆序"><a href="#3-利用栈实现字符串逆序" class="headerlink" title="3. 利用栈实现字符串逆序"></a>3. 利用栈实现字符串逆序</h2><p>​    一开始我们就说了，栈是用来构思算法的工具，下面来利用栈实现字符串的逆序。比如我们输入 “hello world” ，之后将其反转输出，根据栈的特性，容易想到只要一个个push进栈，在依次pop出栈即可实现逆序。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        ArrayStack stack = <span class="keyword">new</span> ArrayStack(<span class="number">2</span>);</span><br><span class="line">        String str = <span class="string">"Hello world"</span>;</span><br><span class="line">        <span class="keyword">char</span>[] cha = str.toCharArray();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">char</span> c : cha)&#123;</span><br><span class="line">            stack.push(c);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (!stack.isEmpty())&#123;</span><br><span class="line">            System.out.print(stack.pop());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><blockquote><p>结果：<img src="\postsource\java数据结构与算法\4\arrayStackResult2.png" alt=""></p></blockquote><h2 id="4-利用栈判断分隔符是否匹配"><a href="#4-利用栈判断分隔符是否匹配" class="headerlink" title="4. 利用栈判断分隔符是否匹配"></a>4. 利用栈判断分隔符是否匹配</h2><p>​    在写xml或者html时，我们知道分隔符必须和最近的匹配，比如 &lt;as[123]as&gt;是正确的，而&lt;as[123&gt;as]就是不匹配的的。利用栈的特性，我们可以写一个判断分隔符是否匹配的方法。可以遇到左边分隔符就入栈，接着遇到下个右边分隔符判断是否和最近的左边分隔符相匹配。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">         ArrayStack stack = <span class="keyword">new</span> ArrayStack(<span class="number">3</span>);</span><br><span class="line">         String str = <span class="string">"&gt;&lt;as[123&gt;as]&#123;&#125;"</span>;</span><br><span class="line">         <span class="keyword">char</span>[] cha = str.toCharArray();</span><br><span class="line">         <span class="keyword">for</span>(<span class="keyword">char</span> c : cha)&#123;</span><br><span class="line">             <span class="keyword">switch</span> (c) &#123;</span><br><span class="line">                 <span class="keyword">case</span> <span class="string">'&#123;'</span>:</span><br><span class="line">                 <span class="keyword">case</span> <span class="string">'['</span>:</span><br><span class="line">                 <span class="keyword">case</span> <span class="string">'&lt;'</span>:</span><br><span class="line">                     <span class="comment">//入栈左分隔符</span></span><br><span class="line">                     stack.push(c);</span><br><span class="line">                     <span class="keyword">break</span>;</span><br><span class="line">                 <span class="keyword">case</span> <span class="string">'&#125;'</span>:</span><br><span class="line">                 <span class="keyword">case</span> <span class="string">']'</span>:</span><br><span class="line">                 <span class="keyword">case</span> <span class="string">'&gt;'</span>:</span><br><span class="line">                     <span class="comment">//遇到右分隔时和最近的左分隔符判断,并把与其一块判断的左分隔符出栈，方便接下来的判断</span></span><br><span class="line">                     <span class="keyword">if</span>(!stack.isEmpty())&#123;</span><br><span class="line">                         <span class="keyword">char</span> ch = stack.pop().toString().toCharArray()[<span class="number">0</span>];</span><br><span class="line">                         <span class="keyword">if</span>(c==<span class="string">'&#125;'</span> &amp;&amp; ch != <span class="string">'&#123;'</span></span><br><span class="line">                                 || c==<span class="string">']'</span> &amp;&amp; ch != <span class="string">'['</span></span><br><span class="line">                                 || c==<span class="string">'&gt;'</span> &amp;&amp; ch != <span class="string">'&lt;'</span>)&#123;</span><br><span class="line">                             System.out.println(<span class="string">"Error:"</span>+ch+<span class="string">"-"</span>+c);</span><br><span class="line">                         &#125;</span><br><span class="line">                     &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                         System.out.println(<span class="string">"Error: -"</span>+c);</span><br><span class="line">                     &#125;</span><br><span class="line">                     <span class="keyword">break</span>;</span><br><span class="line">                 <span class="keyword">default</span>:</span><br><span class="line">                     <span class="keyword">break</span>;</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure><blockquote><p>结果：</p><p><img src="\postsource\java数据结构与算法\4\arrayStackResult3.png" alt=""></p></blockquote><h2 id="5-总结"><a href="#5-总结" class="headerlink" title="5.总结"></a>5.总结</h2><p>​    因为栈的操作时间不依赖栈中数据项的个数，所以入栈、出栈操作的时间复杂度都为$O(1)$ 。</p>]]></content>
      
      <categories>
          
          <category> Java数据结构与算法学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java数据结构与算法 </tag>
            
            <tag> 栈 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Java数据结构与算法学习笔记——排序算法</title>
      <link href="/2018/08/01/java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/Java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B03%E2%80%94%E6%8E%92%E5%BA%8F/"/>
      <url>/2018/08/01/java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/Java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B03%E2%80%94%E6%8E%92%E5%BA%8F/</url>
      <content type="html"><![CDATA[<hr><p>​    上一篇博客我们实现的数组结构是无序的，也就是纯粹按照插入顺序进行排列，那么如何进行元素排序，本篇博客我们介绍几种简单的排序算法。 <a id="more"></a></p><h2 id="1-冒泡排序"><a href="#1-冒泡排序" class="headerlink" title="1. 冒泡排序"></a>1. 冒泡排序</h2><p>冒泡排序（Bubble Sort），是一种计算机科学领域的较简单的<a href="https://baike.baidu.com/item/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/5399605" target="_blank" rel="noopener">排序算法</a>。 </p><h3 id="冒泡排序算法的原理："><a href="#冒泡排序算法的原理：" class="headerlink" title="冒泡排序算法的原理："></a>冒泡排序算法的原理：</h3><ol><li>比较相邻的元素。如果第一个比第二个大，就交换他们两个。</li><li>对每一对相邻元素做同样的工作，从开始第一对到结尾的最后一对。在这一点，最后的元素应该会是最大的数。</li><li>针对所有的元素重复以上的步骤，除了最后一个。</li><li>持续每次对越来越少的元素重复上面的步骤，直到没有任何一对数字需要比较。</li></ol><p><img src="\postsource\java数据结构与算法\3\1.gif" alt=""></p><h3 id="Java代码实现："><a href="#Java代码实现：" class="headerlink" title="Java代码实现："></a>Java代码实现：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">bubbleSort</span><span class="params">(<span class="keyword">int</span> []arr)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//i表示一共循环多少轮</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">0</span>;i&lt;arr.length-<span class="number">1</span>;i++) &#123;</span><br><span class="line">            <span class="comment">//加一个开关，当排序已经完成时不再继续循环</span></span><br><span class="line">            <span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br><span class="line">            <span class="comment">//每轮参与比较元素的下标，每轮比较后需要比较的元素减少1</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;arr.length-i-<span class="number">1</span>;j++) &#123;<span class="comment">//-1为了防止溢出</span></span><br><span class="line">                <span class="keyword">if</span>(arr[j]&gt;arr[j+<span class="number">1</span>]) &#123;</span><br><span class="line">                    <span class="keyword">int</span> temp = arr[j];</span><br><span class="line">                    arr[j]=arr[j+<span class="number">1</span>];</span><br><span class="line">                    arr[j+<span class="number">1</span>]=temp;</span><br><span class="line">                    falg = <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(flag)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="冒泡排序时间复杂度分析"><a href="#冒泡排序时间复杂度分析" class="headerlink" title="冒泡排序时间复杂度分析"></a>冒泡排序时间复杂度分析</h3><p>​    设数组元素个数为Ｎ，则第一轮排序有 $N-1$ 次比较，第二轮有 $N-2$ 次，如此类推，这种序列的求和公式为：</p><p>　　$（N-1）+（N-2）+…+1 = N*（N-1）/2$</p><p>​    当Ｎ的值足够大时，按照计算时间复杂度的原则，去掉常数，去掉最高项系数，其复杂度为 $O(N^2)$ </p><p>​    在加入 <code>flag</code> 后，对于一个有序数组，算法完成第一次外层循环后就会返回。实际只发生了$N-1$次比较，所以最好的情况下，该算法的时间复杂度为$O(N)$ 。</p><p>​    其实无论何时，只要看见一个循环嵌套在另一个循环中，我们都可以怀疑这个算法的运行时间为 $O(N^2)$级，外层循环执行 $N$ 次，内层循环对每一次外层循环都执行N次（或者几分之$N$次）。这就意味着大约需要执行$N^2$次某个基本操作。 </p><h2 id="2-选择排序"><a href="#2-选择排序" class="headerlink" title="2. 选择排序"></a>2. 选择排序</h2><p>​    选择排序（Selection sort）是一种简单直观的<a href="https://baike.baidu.com/item/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95" target="_blank" rel="noopener">排序算法</a>。它的工作原理是每一次从待排序的数据元素中选出最小（或最大）的一个元素，存放在序列的起始位置，直到全部待排序的数据元素排完。  </p><h3 id="选择排序原理"><a href="#选择排序原理" class="headerlink" title="选择排序原理"></a>选择排序原理</h3><p><img src="\postsource\java数据结构与算法\3\selSort.jpg" alt=""></p><h3 id="Java代码实现：-1"><a href="#Java代码实现：-1" class="headerlink" title="Java代码实现："></a>Java代码实现：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">selectSort</span><span class="params">(<span class="keyword">int</span>[]a)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> minIndex=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> temp=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>((a==<span class="keyword">null</span>)||(a.length==<span class="number">0</span>))</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;a.length-<span class="number">1</span>;i++)&#123;</span><br><span class="line">        minIndex=i;<span class="comment">//无序区的最小数据数组下标</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span>  j=i+<span class="number">1</span>;j&lt;a.length;j++)&#123;</span><br><span class="line">            <span class="comment">//在无序区中循环两两比对找到最小数据并保存其数组下标</span></span><br><span class="line">            <span class="keyword">if</span>(a[j]&lt;a[minIndex])&#123;</span><br><span class="line">                minIndex=j; </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//将最小元素放到本次循环的前端</span></span><br><span class="line">        <span class="keyword">if</span>(i != minIndex )&#123;</span><br><span class="line">            temp=a[i];</span><br><span class="line">        a[i]=a[minIndex];</span><br><span class="line">        a[minIndex]=temp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="选择排序时间复杂度分析"><a href="#选择排序时间复杂度分析" class="headerlink" title="选择排序时间复杂度分析"></a>选择排序时间复杂度分析</h3><p>​    选择排序的比较操作同冒泡排序一样，都是$N*（N-1）/2$ 次，所以其时间复杂度表示为 $O(N^2)$ ，但其交换操作却比冒泡排序少的多，介于 $0$ 到 $N-1$ 之间，所以选择排序无疑是比冒泡排序快的。</p><h2 id="3-插入排序"><a href="#3-插入排序" class="headerlink" title="3. 插入排序"></a>3. 插入排序</h2><p>​    有一个已经有序的数据序列，要求在这个已经排好的数据序列中插入一个数，但要求插入后此数据序列仍然有序，这个时候就要用到一种新的排序方法——插入排序法。</p><p>​    插入排序还分为直接插入排序、二分插入排序、链表插入排序、希尔排序等等，这里我们只是以直接插入排序讲解。</p><h3 id="插入排序原理"><a href="#插入排序原理" class="headerlink" title="插入排序原理"></a>插入排序原理</h3><p><img src="\postsource\java数据结构与算法\3\insertSort.jpg" alt=""></p><h3 id="Java代码实现：-2"><a href="#Java代码实现：-2" class="headerlink" title="Java代码实现："></a>Java代码实现：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] sort(<span class="keyword">int</span>[] array)&#123;</span><br><span class="line">        <span class="keyword">int</span> j;</span><br><span class="line">        <span class="comment">//从下标为1的元素开始选择合适的位置插入，因为下标为0的只有一个元素，默认是有序的</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span> ; i &lt; array.length ; i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> tmp = array[i];<span class="comment">//记录要插入的数据</span></span><br><span class="line">            j = i;</span><br><span class="line">            <span class="keyword">while</span>(j &gt; <span class="number">0</span> &amp;&amp; tmp &lt; array[j-<span class="number">1</span>])&#123;<span class="comment">//从已经排序的序列最右边的开始比较，找到比其小的数，当大于有序区某数时不再循环。</span></span><br><span class="line">                array[j] = array[j-<span class="number">1</span>];<span class="comment">//向后挪动</span></span><br><span class="line">                j--;</span><br><span class="line">            &#125;</span><br><span class="line">            array[j] = tmp;<span class="comment">//插入有序区</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> array;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="插入排序时间复杂度分析"><a href="#插入排序时间复杂度分析" class="headerlink" title="插入排序时间复杂度分析"></a>插入排序时间复杂度分析</h3><p>​    在第一轮排序中，它最多比较一次，第二轮最多比较两次，依此类推，第N轮，最多比较$N-1$次。因此有 $1+2+3+…+N-1 = N<em>（N-1）/2$ ，所以其时间复杂度表示为 $O(N^2)$ ，但是其不涉及交换操作，在数据基本有序时<del>（比如有序数组中打乱中间的一些元素）</del>，插入排序比其他两种排序方式要快出很多。（在数据基本有序时，其他两种排序方式的比较操作次数可能还是$N</em>（N-1）/2$，而插入排序因为从已排序数组的最右边开始比较，所以比较次数可能接近$N-1$ 次，效率会高出很多）</p><h2 id="4-总结"><a href="#4-总结" class="headerlink" title="4.总结"></a>4.总结</h2><p>​    上面讲的三种排序，冒泡、选择、插入用大 O 表示法都需要 $O(N^2)$ 时间级别。一般不会选择冒泡排序，虽然冒泡排序书写是最简单的，但是平均性能是没有选择排序和插入排序好的。</p><p>　　选择排序把交换次数降低到最低，但是比较次数还是挺大的。当数据量小，并且交换数据相对于比较数据更加耗时的情况下，可以应用选择排序。</p><p>　　在大多数情况下，插入排序是三种算法中最好的选择。</p>]]></content>
      
      <categories>
          
          <category> Java数据结构与算法学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java数据结构与算法 </tag>
            
            <tag> 排序算法 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Java数据结构与算法学习笔记二——数组</title>
      <link href="/2018/07/31/java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/Java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B02%E2%80%94%E6%95%B0%E7%BB%84/"/>
      <url>/2018/07/31/java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/Java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B02%E2%80%94%E6%95%B0%E7%BB%84/</url>
      <content type="html"><![CDATA[<hr><h2 id="1-Java数组介绍"><a href="#1-Java数组介绍" class="headerlink" title="1. Java数组介绍"></a>1. Java数组介绍</h2><p>​    数组对于每一门编程语言来说都是重要的数据结构之一 ，Java中数组是用来存放固定大小的同类型元素。<a id="more"></a></p><h3 id="数组的声明"><a href="#数组的声明" class="headerlink" title="数组的声明"></a>数组的声明</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//声明数组myArray1,声明一个长度为3，只能存放int类型的数据</span></span><br><span class="line"><span class="keyword">int</span> [] myArray1 = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>];</span><br><span class="line"><span class="comment">//声明数组myArray2,声明一个数组元素为 1,2,3的int类型数组</span></span><br><span class="line"><span class="keyword">int</span> [] myArray2 = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br></pre></td></tr></table></figure><h3 id="数组的遍历"><a href="#数组的遍历" class="headerlink" title="数组的遍历"></a>数组的遍历</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> [] array2 = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; array2.length ;i++)&#123;</span><br><span class="line">    System.out.println(array2[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-用类封装数组实现数据结构"><a href="#2-用类封装数组实现数据结构" class="headerlink" title="2. 用类封装数组实现数据结构"></a>2. 用类封装数组实现数据结构</h2><p>​    上一篇文章中我们介绍了一个数据结构必须具有增删改查的基本功能，现在我们用类封装数组，实现以上功能。</p><blockquote><p>假定操作人不会添加重复元素。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> array;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyArray</span> </span>&#123;</span><br><span class="line">    <span class="comment">//定义一个数组</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> [] intArray;</span><br><span class="line">    <span class="comment">//定义数组的实际有效长度</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> elems;</span><br><span class="line">    <span class="comment">//定义数组的最大长度</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> length;</span><br><span class="line">     </span><br><span class="line">    <span class="comment">//默认构造一个长度为50的数组</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyArray</span><span class="params">()</span></span>&#123;</span><br><span class="line">        elems = <span class="number">0</span>;</span><br><span class="line">        length = <span class="number">50</span>;</span><br><span class="line">        intArray = <span class="keyword">new</span> <span class="keyword">int</span>[length];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//构造函数，初始化一个长度为length 的数组</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyArray</span><span class="params">(<span class="keyword">int</span> length)</span></span>&#123;</span><br><span class="line">        elems = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">this</span>.length = length;</span><br><span class="line">        intArray = <span class="keyword">new</span> <span class="keyword">int</span>[length];</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="comment">//获取数组的有效长度</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getSize</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> elems;</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 遍历显示元素</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; elems ; i++)&#123;</span><br><span class="line">            System.out.print(intArray[i]+<span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加元素</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value,假设操作人是不会添加重复元素的，如果有重复元素对于后面的操作都会有影响。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 添加成功返回true,添加的元素超过范围了返回false</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> value)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(elems == length)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            intArray[elems] = value;</span><br><span class="line">            elems++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据下标获取元素</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> i 元素下标</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 查找下标值在数组下标有效范围内，返回下标所表示的元素</span></span><br><span class="line"><span class="comment">     * 查找下标超出数组下标有效值，提示访问下标越界</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(i&lt;<span class="number">0</span> || i&gt;elems)&#123;</span><br><span class="line">            System.out.println(<span class="string">"访问下标越界"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> intArray[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查找元素</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> searchValue</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>查找的元素如果存在则返回下标值，如果不存在，返回 -1</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> searchValue)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i ;</span><br><span class="line">        <span class="keyword">for</span>(i = <span class="number">0</span> ; i &lt; elems ;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(intArray[i] == searchValue)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(i == elems)&#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除元素</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 如果要删除的值不存在，直接返回 false;否则返回true，删除成功</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">delete</span><span class="params">(<span class="keyword">int</span> value)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> k = find(value);</span><br><span class="line">        <span class="keyword">if</span>(k == -<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(k == elems-<span class="number">1</span>)&#123;</span><br><span class="line">                elems--;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i = k; i&lt; elems-<span class="number">1</span> ; i++)&#123;</span><br><span class="line">                    intArray[i] = intArray[i+<span class="number">1</span>];</span><br><span class="line">                &#125;</span><br><span class="line">                 elems--;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 修改数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> oldValue</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> newValue</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 修改成功返回true，修改失败返回false</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">modify</span><span class="params">(<span class="keyword">int</span> oldValue,<span class="keyword">int</span> newValue)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = find(oldValue);</span><br><span class="line">        <span class="keyword">if</span>(i == -<span class="number">1</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">"需要修改的数据不存在"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            intArray[i] = newValue;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-数组的局限性"><a href="#3-数组的局限性" class="headerlink" title="3. 数组的局限性"></a>3. 数组的局限性</h2><p>​    通过以上的代码，我们发现数组是能完成一个数据结构的所有功能的，而且实现起来也不难的，那实际工作中为啥很少使用数组进行数据存储呢？</p><p><em>数组局限性分析：</em></p><ul><li>查找慢，我们是根据元素值来查找，给定一个元素值，对于无序数组，我们需要从数组第一个元素开始遍历，直到找到那个元素。 </li><li>删除慢，我们要先遍历找到元素的位置，然后将其后的元素向前移动一位。</li><li>数组一旦创建，大小就固定了，不能动态扩展，浪费内存。</li><li>插入块，队伍无序数组，增加一个元素很简单，就是在末尾添加即可。</li></ul><h2 id="4-总结"><a href="#4-总结" class="headerlink" title="4. 总结"></a>4. 总结</h2><p>​    本篇文章我们讲解了数组的基本用法，以及用Java语言中的类实现了一个数组的数据结构，但是我们分析该数据结构，发现存在很多性能问题，后面会讲解别的数据结构，看看那些数据结构是如何处理这些问题的。 </p>]]></content>
      
      <categories>
          
          <category> Java数据结构与算法学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java数据结构与算法 </tag>
            
            <tag> 数组 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Java数据结构与算法学习笔记——概述</title>
      <link href="/2018/07/31/java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/Java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01%E2%80%94%E6%A6%82%E8%BF%B0/"/>
      <url>/2018/07/31/java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/Java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01%E2%80%94%E6%A6%82%E8%BF%B0/</url>
      <content type="html"><![CDATA[<hr><p>​    转行到现在一年了，一直没有系统的学习过数据结构算法，工作中确实没用到过，但总不能调一辈子API而不去想其内部实现，查东西只能想到遍历，做一下算法题遇到红黑树这些名词还是一脸懵逼。本着提升自己的编程思维的目的，正好最近公司没啥项目，就开个坑开始学习数据结构与算法。放到这个刚弄好的博客上也是对自己的一种督促，自己也是到处查资料学习，有不对的地方希望大家指正<del>（等我弄好博客的评论功能再说）</del>。<a id="more"></a></p><h2 id="1-什么是数据结构"><a href="#1-什么是数据结构" class="headerlink" title="1. 什么是数据结构"></a>1. 什么是数据结构</h2><p>​    <strong>数据结构是计算机存储、组织数据的方式，指相互之间存在一种或多种特定关系的数据元素的集合。</strong> 即数据怎么组织，怎么描述，在计算机中怎么储存。如把一个班的学生进行编号排队，可以使用 “数组” 来描述，而如果要描述一个家族的谱系，则可以用 “树” 来描述。</p><h2 id="2-常用的数据结构"><a href="#2-常用的数据结构" class="headerlink" title="2. 常用的数据结构"></a>2. 常用的数据结构</h2><p>​    <img src="\postsource\java数据结构与算法\1\1.jpg" alt=""></p><p>​    这几种结构优缺点如下：</p><p><img src="\postsource\java数据结构与算法\1\2.png" alt=""></p><h2 id="3-数据结构的基本功能"><a href="#3-数据结构的基本功能" class="headerlink" title="3. 数据结构的基本功能"></a>3. 数据结构的基本功能</h2><ol><li>插入一条数据项</li><li>寻找某一特定数据项</li><li>删除某一数据项</li><li>迭代各个数据项，以便进行其他操作</li></ol><h2 id="4-什么是算法"><a href="#4-什么是算法" class="headerlink" title="4. 什么是算法"></a>4. 什么是算法</h2><p>​    <strong>简单来说，算法就是定义良好的计算过程，用来将输入数据转化成输出结果。</strong>前面的数据结构，比如链表为啥插入、删除快，而查找慢，平衡的二叉树插入、删除、查找都快，这都是实现这些数据结构的算法所造成的。 </p><h2 id="5-算法的设计原则"><a href="#5-算法的设计原则" class="headerlink" title="5. 算法的设计原则"></a>5. 算法的设计原则</h2><ul><li><p><strong>正确性</strong>：首先，算法应当满足以特定的“规则说明”方式给出的需求。 </p></li><li><p><strong>可读性</strong>：算法为了人的阅读与交流，其次才是计算机执行。因此算法应该易于人的理解；另一方面，晦涩难懂的程序易于隐藏较多的错误而难以调试。 </p></li><li><p><strong>健壮性</strong>：当输入的数据非法时，算法应当恰当的做出反应或进行相应处理，而不是产生莫名其妙的输出结果。并且，处理出错的方法不应是中断程序执行，而是应当返回一个表示错误或错误性质的值，以便在更高的抽象层次上进行处理。 </p></li><li><p><strong>高效率与低存储量需求</strong>：通常算法效率值得是算法执行时间；存储量是指算法执行过程中所需要的最大存储空间。</p><blockquote><p>一个算法执行所耗时间，从理论上是不能计算出来的，必须上机测试才能知道，但上机测试所得时间依赖于计算机的硬件、软件环境等因素，有时容易掩盖算法本身的优势。  </p><p>所以引入算法的时间复杂度的概念，记做：T(n)=O(f(n)) ，表示算法的执行时间随着n的增长而增长的速率，常见算法时间复杂度有小到大依次为：</p><p><em><u>Ο(1)＜Ο(log2n)＜Ο(n)＜Ο(nlog2n)＜Ο(n^2)＜Ο(n^3)＜…＜Ο(2n)＜Ο(n!)</u></em></p></blockquote></li></ul>]]></content>
      
      <categories>
          
          <category> Java数据结构与算法学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java数据结构与算法 </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
