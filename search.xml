<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>Java数据结构与算法学习笔记——链表</title>
      <link href="/2018/08/04/java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/Java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B06%E2%80%94%E9%93%BE%E8%A1%A8/"/>
      <url>/2018/08/04/java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/Java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B06%E2%80%94%E9%93%BE%E8%A1%A8/</url>
      <content type="html"><![CDATA[<hr><p>​    通过之前的学习，了解到数组作为数据存储结构是有一定的缺陷的。在无序数组中，搜索性能差，在有序数组中，插入效率又很低，而且这两种数组的删除效率都很低，并且数组在创建后，其大小是固定了，设置的过大会造成内存的浪费，过小又不能满足数据量的存储。 </p><p>​    所以在此引入一种新型的数据结构——链表，链表和数组一样也是一种使用广泛的通用数据结构，<a id="more"></a>链表是一种物理存储单元上非连续、非顺序的存储结构，数据元素的逻辑顺序是通过链表中的指针链接次序实现的。链表由一系列结点（链表中每一个元素称为结点）组成，结点可以在运行时动态生成。每个结点包括两个部分：一个是存储数据元素的数据域，另一个是存储下一个结点地址的指针域。 </p><p>​    使用链表结构可以克服数组链表需要预先知道数据大小的缺点，链表结构可以充分利用计算机内存空间，实现灵活的内存动态管理。 但是链表失去了数组随机读取的优点，同时由于增加了结点的指针域，空间开销比较大。</p><h2 id="1-单向链表"><a href="#1-单向链表" class="headerlink" title="1. 单向链表"></a>1. 单向链表</h2>]]></content>
      
      <categories>
          
          <category> Java数据结构与算法学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java数据结构与算法 </tag>
            
            <tag> 链表 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Java数据结构与算法学习笔记——队列</title>
      <link href="/2018/08/03/java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/Java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B05%E2%80%94%E9%98%9F%E5%88%97/"/>
      <url>/2018/08/03/java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/Java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B05%E2%80%94%E9%98%9F%E5%88%97/</url>
      <content type="html"><![CDATA[<hr><p>​    本篇博客我们介绍另外一种作为构思算法的辅助工具的数据结构——队列。栈是后进先出，而队列则正好相反，是先进先出，类似网游进游戏时需要排队等待的情况。<a id="more"></a></p><h2 id="1-队列的基本概念"><a href="#1-队列的基本概念" class="headerlink" title="1. 队列的基本概念"></a>1. 队列的基本概念</h2><p>​    队列(queue)是一种特殊的<a href="https://baike.baidu.com/item/%E7%BA%BF%E6%80%A7%E8%A1%A8" target="_blank" rel="noopener">线性表</a>，特殊之处在于它只允许在表的前端（front）进行删除操作，而在表的后端（rear）进行插入操作，和栈一样，队列是一种操作受限制的线性表。进行插入操作的端称为队尾，进行删除操作的端称为队头。其存取元素遵循先进先出原则（FIFO,First Input First OutPut）</p><p>​    队列细分又分为<strong>单向队列</strong>(Queue 只在一端插入数据，另一端删除)，<strong>双向队列(</strong>Deque 每一段都可以进行插入删除)，<strong>优先级队列</strong>(Priority queue 每个元素都有一个优先权，一般情况下，查找操作用来搜索优先权最大的元素，删除操作用来删除该元素 。对于优先权相同的元素，可按先进先出次序处理或按任意优先权进行  )，下面我们先介绍单向队列：</p><h2 id="２-Java模拟单向队列的实现"><a href="#２-Java模拟单向队列的实现" class="headerlink" title="２. Java模拟单向队列的实现"></a>２. Java模拟单向队列的实现</h2><p>​    我们假设一个队列有n个元素，则顺序存储的队列需建立一个大于n的数组，并把队列的所有元素存储在数组的前n个单元，数组下标为0的一端即是队头。所谓的入队列操作，其实就是在队尾追加一个元素，不需要移动任何元素，因此时间复杂度为$O(1)$。</p><p>​    与栈不同的是，队列元素的出列是在队头，即下标为0的位置，那也就意味着，队列中的所有元素都得向前移动，以保证队列的队头（也就是下标为0的位置）不为空，此时的时间复杂度为$O(n)$。<br>            <img src="\postsource\java数据结构与算法\5\1.jpg" alt=""></p><p>​    这样设计显然是不合理的，我们为什么要固定队头的位置去平移数组呢？为什么不变更出队的位置呢？所以引入两个指针，front和rear指针，入队时rear向后移，出队时front指针也向后移动，这样出队操作的时间复杂度也为$O(1)$。<br>            <img src="\postsource\java数据结构与算法\5\2.jpg" alt=""></p><p>​    那么当这个队列rear指针超出范围时，这个数组明明还有空余我们就说它溢出了这对内存是一种浪费，所以引入循环队列的概念，后面满了，我们就从头开始，组成一个首尾相接的循环。<br>            <img src="\postsource\java数据结构与算法\5\3.jpg" alt=""></p><p>​            <img src="\postsource\java数据结构与算法\5\4.jpg" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> array;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyQueue</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Object[] queArray;</span><br><span class="line">    <span class="comment">//队列总大小</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> maxSize;</span><br><span class="line">    <span class="comment">//前端</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> front;</span><br><span class="line">    <span class="comment">//后端</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> rear;</span><br><span class="line">    <span class="comment">//队列中元素的实际数目</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> nItems;</span><br><span class="line">     </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyQueue</span><span class="params">(<span class="keyword">int</span> s)</span></span>&#123;</span><br><span class="line">        maxSize = s;</span><br><span class="line">        queArray = <span class="keyword">new</span> Object[maxSize];</span><br><span class="line">        front = <span class="number">0</span>;</span><br><span class="line">        rear = -<span class="number">1</span>;</span><br><span class="line">        nItems = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="comment">//队列中新增数据</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> value)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(isFull())&#123;</span><br><span class="line">            System.out.println(<span class="string">"队列已满！！！"</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//如果队列尾部指向顶了，那么循环回来，执行队列的第一个元素</span></span><br><span class="line">            <span class="keyword">if</span>(rear == maxSize -<span class="number">1</span>)&#123;</span><br><span class="line">                rear = -<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//队尾指针加1，然后在队尾指针处插入新的数据</span></span><br><span class="line">            queArray[++rear] = value;</span><br><span class="line">            nItems++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="comment">//移除数据</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">remove</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Object removeValue = <span class="keyword">null</span> ;</span><br><span class="line">        <span class="keyword">if</span>(!isEmpty())&#123;</span><br><span class="line">            removeValue = queArray[front];</span><br><span class="line">            queArray[front] = <span class="keyword">null</span>;</span><br><span class="line">            front++;</span><br><span class="line">            <span class="keyword">if</span>(front == maxSize)&#123;</span><br><span class="line">                front = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            nItems--;</span><br><span class="line">            <span class="keyword">return</span> removeValue;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> removeValue;</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="comment">//查看对头数据</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">peekFront</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> queArray[front];</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">     </span><br><span class="line">    <span class="comment">//判断队列是否满了</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isFull</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (nItems == maxSize);</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="comment">//判断队列是否为空</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (nItems ==<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="comment">//返回队列的大小</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getSize</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> nItems;</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        MyQueue queue = <span class="keyword">new</span> MyQueue(<span class="number">3</span>);</span><br><span class="line">        queue.insert(<span class="number">1</span>);</span><br><span class="line">        queue.insert(<span class="number">2</span>);</span><br><span class="line">        queue.insert(<span class="number">3</span>);</span><br><span class="line">        System.out.println(Arrays.toString(queue.queArray));</span><br><span class="line">        System.out.println(queue.peekFront()); <span class="comment">//1</span></span><br><span class="line">        queue.remove();</span><br><span class="line">        System.out.println(Arrays.toString(queue.queArray));</span><br><span class="line">        System.out.println(queue.peekFront()); <span class="comment">//2</span></span><br><span class="line"></span><br><span class="line">        queue.insert(<span class="number">4</span>);</span><br><span class="line">        queue.insert(<span class="number">5</span>);</span><br><span class="line">        System.out.println(Arrays.toString(queue.queArray));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><blockquote><p>结果：<img src="\postsource\java数据结构与算法\5\5.png" alt=""></p></blockquote><h2 id="3-双端队列"><a href="#3-双端队列" class="headerlink" title="3. 双端队列"></a>3. 双端队列</h2><p>​    双端队列就是一个两端都是结尾或者开头的队列， 队列的每一端都可以进行插入数据项和移除数据项 。</p><p>​    如果严格禁止某一端的操作，其功能就和栈一样。</p><p>​    如果严格禁止offerFirst()和pollLast() 或相反的另一对方法，那么双端队列就和单向队列一样了。</p><h2 id="4-优先级队列"><a href="#4-优先级队列" class="headerlink" title="4. 优先级队列"></a>4. 优先级队列</h2><p>​    我们用int数组来实现优先级队列，根据之前的介绍，我们就用int数值的大小来定义其优先级，越小的元素优先级越高，在插入的时候按照由大到小进行排序。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> array;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PriorityQue</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> maxSize;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] priQueArray;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> nItems;</span><br><span class="line">     </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PriorityQue</span><span class="params">(<span class="keyword">int</span> s)</span></span>&#123;</span><br><span class="line">        maxSize = s;</span><br><span class="line">        priQueArray = <span class="keyword">new</span> <span class="keyword">int</span>[maxSize];</span><br><span class="line">        nItems = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="comment">//插入数据</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> value)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (isFull())&#123;</span><br><span class="line">            System.out.println(<span class="string">"队列已满！"</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> j;</span><br><span class="line">        <span class="keyword">if</span>(nItems == <span class="number">0</span>)&#123;</span><br><span class="line">            priQueArray[nItems++] = value;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            j = nItems -<span class="number">1</span>;</span><br><span class="line">            <span class="comment">//选择的排序方法是插入排序，按照从大到小的顺序排列，越小的越在队列的顶端</span></span><br><span class="line">            <span class="keyword">while</span>(j &gt;=<span class="number">0</span> &amp;&amp; value &gt; priQueArray[j])&#123;</span><br><span class="line">                priQueArray[j+<span class="number">1</span>] = priQueArray[j];</span><br><span class="line">                j--;</span><br><span class="line">            &#125;</span><br><span class="line">            priQueArray[j+<span class="number">1</span>] = value;</span><br><span class="line">            nItems++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="comment">//移除数据,由于是按照大小排序的，所以移除数据我们指针向下移动</span></span><br><span class="line">    <span class="comment">//被移除的地方由于是int类型的，不能设置为null，这里的做法是设置为 -1</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">remove</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (isEmpty())&#123;</span><br><span class="line">            System.out.println(<span class="string">"没有可以移除的了"</span>);</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> k = nItems -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> value = priQueArray[k];</span><br><span class="line">        priQueArray[k] = -<span class="number">1</span>;<span class="comment">//-1表示这个位置的数据被移除了</span></span><br><span class="line">        nItems--;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="comment">//查看优先级最高的元素</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">peekMin</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> priQueArray[nItems-<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="comment">//判断是否为空</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (nItems == <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="comment">//判断是否满了</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isFull</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (nItems == maxSize);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>其插入操作的时间复杂度为$O(N)$ ，其他操作时间复杂度为$O(1)$ ，用数组实现的优先级队列适用于数据量比较小且不注重插入速度的场合。</p></blockquote><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        PriorityQue pq = <span class="keyword">new</span> PriorityQue(<span class="number">4</span>);</span><br><span class="line">        pq.insert(<span class="number">5</span>);</span><br><span class="line">        pq.insert(<span class="number">6</span>);</span><br><span class="line">        System.out.println(Arrays.toString(pq.priQueArray));</span><br><span class="line">        pq.insert(<span class="number">3</span>);</span><br><span class="line">        System.out.println(Arrays.toString(pq.priQueArray));</span><br><span class="line">        pq.insert(<span class="number">4</span>);</span><br><span class="line">        System.out.println(Arrays.toString(pq.priQueArray));</span><br><span class="line">        System.out.println(pq.remove());</span><br><span class="line">        System.out.println(Arrays.toString(pq.priQueArray));</span><br><span class="line">        pq.insert(<span class="number">7</span>);</span><br><span class="line">        System.out.println(Arrays.toString(pq.priQueArray));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><blockquote><p>结果： <img src="/images/placeholder.png" alt="" data-src="\postsource\java数据结构与算法\5\6.png" class="lazyload"></p></blockquote><h2 id="5-总结"><a href="#5-总结" class="headerlink" title="5. 总结"></a>5. 总结</h2><ul><li>栈、队列（单向队列）、优先级队列通常是用来简化某些程序操作的数据结构，而不是主要作为存储数据的。 </li><li>优先级队列是有序的插入数据，并且只能访问当前元素中优先级别最大（或最小）的元素。 </li><li>使用数组实现的队列都会面临着溢出的问题，之后我们会学习不需要担心队列长度的链式存储结构。</li></ul>]]></content>
      
      <categories>
          
          <category> Java数据结构与算法学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java数据结构与算法 </tag>
            
            <tag> 队列 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Java数据结构与算法学习笔记——栈</title>
      <link href="/2018/08/02/java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/Java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B04%E2%80%94%E6%A0%88/"/>
      <url>/2018/08/02/java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/Java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B04%E2%80%94%E6%A0%88/</url>
      <content type="html"><![CDATA[<hr><p>​    有些数据结构并不像数组一样完全作为一种数据存储工具，而更多的是作为程序员的工具，作为一种构思算法的辅助工具。这些数据结构的生命周期比数据库类型的结构要短得多，在程序执行期间它们才被创建，通常用它们去执行某项特殊的业务，执行完成之后，它们就被销毁。这里的它们就是——栈和队列。尽管很多高级语言，比如java，对常用数据结构都有封装，我们不用关注其细节直接使用即可，但这与我们正常的学习过程相违背，以后不做赘述。本篇博客我们先介绍栈。 <a id="more"></a></p><h2 id="1-栈的基本概念"><a href="#1-栈的基本概念" class="headerlink" title="1. 栈的基本概念"></a>1. 栈的基本概念</h2><p>​    栈（stack）又名<strong>堆栈</strong>，它是一种运算受限的线性表。其限制是仅允许在表的一端进行插入和删除运算。这一端被称为栈顶(top)，相对地，把另一端称为栈底(bottom)。向一个栈插入新元素又称作进栈、入栈或压栈(push)，它是把新元素放到栈顶元素的上面，使之成为新的栈顶元素；从一个栈删除元素又称作出栈或退栈(pop)，它是把栈顶元素删除掉，使其相邻的元素成为新的栈顶元素。 </p><p>​    由于堆叠数据结构只允许在一端进行操作，因而按照后进先出（LIFO, Last In First Out）的原理运作。栈也称为后进先出表。 可以类比羽毛球筒。</p><h2 id="2-Java代码的实现"><a href="#2-Java代码的实现" class="headerlink" title="2. Java代码的实现"></a>2. Java代码的实现</h2><blockquote><p>JDK在java.util.Stack包下完成了栈的实现，其api如下：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Stack stack=<span class="keyword">new</span> Stack();</span><br><span class="line">stack.empty(); <span class="comment">//判断是否为空</span></span><br><span class="line">stack.push(Object); <span class="comment">//进栈</span></span><br><span class="line">stack.pop();<span class="comment">//出栈,并返回改对象</span></span><br><span class="line">stack.peek();<span class="comment">//取栈顶值（不出栈）</span></span><br></pre></td></tr></table></figure><p>下面我们用数组来实现简单的顺序栈：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> array;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.EmptyStackException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayStack</span> </span>&#123;</span><br><span class="line">    <span class="comment">//存储元素的数组,声明为Object类型能存储任意类型的数据</span></span><br><span class="line">    <span class="keyword">private</span> Object[] elementData;</span><br><span class="line">    <span class="comment">//指向栈顶的指针</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> top;</span><br><span class="line">    <span class="comment">//栈的总容量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> size;</span><br><span class="line">     </span><br><span class="line">     </span><br><span class="line">    <span class="comment">//默认构造一个容量为10的栈</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ArrayStack</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.elementData = <span class="keyword">new</span> Object[<span class="number">10</span>];</span><br><span class="line">        <span class="keyword">this</span>.top = -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">this</span>.size = <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ArrayStack</span><span class="params">(<span class="keyword">int</span> initialCapacity)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(initialCapacity &lt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"栈初始容量不能小于0: "</span>+initialCapacity);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.elementData = <span class="keyword">new</span> Object[initialCapacity];</span><br><span class="line">        <span class="keyword">this</span>.top = -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">this</span>.size = initialCapacity;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"ArrayStack&#123;"</span> +</span><br><span class="line">                <span class="string">"elementData="</span> + Arrays.toString(elementData) +</span><br><span class="line">                <span class="string">", top="</span> + top +</span><br><span class="line">                <span class="string">", size="</span> + size +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//压入元素</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">push</span><span class="params">(Object item)</span></span>&#123;</span><br><span class="line">        <span class="comment">//是否需要扩容</span></span><br><span class="line">        isGrow(top+<span class="number">1</span>);</span><br><span class="line">        elementData[++top] = item;</span><br><span class="line">        <span class="keyword">return</span> item;</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="comment">//弹出栈顶元素</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">pop</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Object obj = peek();</span><br><span class="line">        remove(top);</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="comment">//获取栈顶元素</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">peek</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(top == -<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> EmptyStackException();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> elementData[top];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//判断栈是否为空</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (top == -<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="comment">//删除栈顶元素</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(<span class="keyword">int</span> top)</span></span>&#123;</span><br><span class="line">        <span class="comment">//栈顶元素置为null</span></span><br><span class="line">        elementData[top] = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">this</span>.top--;</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是否需要扩容，如果需要，则扩大一倍并返回true，不需要则返回false</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> minCapacity</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isGrow</span><span class="params">(<span class="keyword">int</span> minCapacity)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> oldCapacity = size;</span><br><span class="line">        <span class="comment">//如果当前元素压入栈之后总容量大于前面定义的容量，则需要扩容</span></span><br><span class="line">        <span class="keyword">if</span>(minCapacity &gt;= oldCapacity)&#123;</span><br><span class="line">            <span class="comment">//定义扩大之后栈的总容量</span></span><br><span class="line">            <span class="keyword">int</span> newCapacity = <span class="number">0</span>;</span><br><span class="line">            <span class="comment">//栈容量扩大两倍(左移一位)看是否超过int类型所表示的最大范围</span></span><br><span class="line">            <span class="keyword">if</span>((oldCapacity&lt;&lt;<span class="number">1</span>) - Integer.MAX_VALUE &gt;<span class="number">0</span>)&#123;</span><br><span class="line">                newCapacity = Integer.MAX_VALUE;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                newCapacity = (oldCapacity&lt;&lt;<span class="number">1</span>);<span class="comment">//长度*2</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">this</span>.size = newCapacity;</span><br><span class="line">            elementData = Arrays.copyOf(elementData, size);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">         ArrayStack stack = <span class="keyword">new</span> ArrayStack(<span class="number">2</span>);</span><br><span class="line">         System.out.println(stack);</span><br><span class="line">         stack.push(<span class="number">1</span>);</span><br><span class="line">         stack.push(<span class="number">2</span>);</span><br><span class="line">         System.out.println(stack);</span><br><span class="line">         stack.push(<span class="number">3</span>);</span><br><span class="line">         System.out.println(stack);</span><br><span class="line">         stack.pop();</span><br><span class="line">         System.out.println(stack);</span><br><span class="line">         System.out.println(stack.peek());</span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure><blockquote><p>结果：</p><p><img src="\postsource\java数据结构与算法\4\arrayStackResult.png" alt=""></p></blockquote><h2 id="3-利用栈实现字符串逆序"><a href="#3-利用栈实现字符串逆序" class="headerlink" title="3. 利用栈实现字符串逆序"></a>3. 利用栈实现字符串逆序</h2><p>​    一开始我们就说了，栈是用来构思算法的工具，下面来利用栈实现字符串的逆序。比如我们输入 “hello world” ，之后将其反转输出，根据栈的特性，容易想到只要一个个push进栈，在依次pop出栈即可实现逆序。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        ArrayStack stack = <span class="keyword">new</span> ArrayStack(<span class="number">2</span>);</span><br><span class="line">        String str = <span class="string">"Hello world"</span>;</span><br><span class="line">        <span class="keyword">char</span>[] cha = str.toCharArray();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">char</span> c : cha)&#123;</span><br><span class="line">            stack.push(c);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (!stack.isEmpty())&#123;</span><br><span class="line">            System.out.print(stack.pop());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><blockquote><p>结果：<img src="\postsource\java数据结构与算法\4\arrayStackResult2.png" alt=""></p></blockquote><h2 id="4-利用栈判断分隔符是否匹配"><a href="#4-利用栈判断分隔符是否匹配" class="headerlink" title="4. 利用栈判断分隔符是否匹配"></a>4. 利用栈判断分隔符是否匹配</h2><p>​    在写xml或者html时，我们知道分隔符必须和最近的匹配，比如 &lt;as[123]as&gt;是正确的，而&lt;as[123&gt;as]就是不匹配的的。利用栈的特性，我们可以写一个判断分隔符是否匹配的方法。可以遇到左边分隔符就入栈，接着遇到下个右边分隔符判断是否和最近的左边分隔符相匹配。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">         ArrayStack stack = <span class="keyword">new</span> ArrayStack(<span class="number">3</span>);</span><br><span class="line">         String str = <span class="string">"&gt;&lt;as[123&gt;as]&#123;&#125;"</span>;</span><br><span class="line">         <span class="keyword">char</span>[] cha = str.toCharArray();</span><br><span class="line">         <span class="keyword">for</span>(<span class="keyword">char</span> c : cha)&#123;</span><br><span class="line">             <span class="keyword">switch</span> (c) &#123;</span><br><span class="line">                 <span class="keyword">case</span> <span class="string">'&#123;'</span>:</span><br><span class="line">                 <span class="keyword">case</span> <span class="string">'['</span>:</span><br><span class="line">                 <span class="keyword">case</span> <span class="string">'&lt;'</span>:</span><br><span class="line">                     <span class="comment">//入栈左分隔符</span></span><br><span class="line">                     stack.push(c);</span><br><span class="line">                     <span class="keyword">break</span>;</span><br><span class="line">                 <span class="keyword">case</span> <span class="string">'&#125;'</span>:</span><br><span class="line">                 <span class="keyword">case</span> <span class="string">']'</span>:</span><br><span class="line">                 <span class="keyword">case</span> <span class="string">'&gt;'</span>:</span><br><span class="line">                     <span class="comment">//遇到右分隔时和最近的左分隔符判断,并把与其一块判断的左分隔符出栈，方便接下来的判断</span></span><br><span class="line">                     <span class="keyword">if</span>(!stack.isEmpty())&#123;</span><br><span class="line">                         <span class="keyword">char</span> ch = stack.pop().toString().toCharArray()[<span class="number">0</span>];</span><br><span class="line">                         <span class="keyword">if</span>(c==<span class="string">'&#125;'</span> &amp;&amp; ch != <span class="string">'&#123;'</span></span><br><span class="line">                                 || c==<span class="string">']'</span> &amp;&amp; ch != <span class="string">'['</span></span><br><span class="line">                                 || c==<span class="string">'&gt;'</span> &amp;&amp; ch != <span class="string">'&lt;'</span>)&#123;</span><br><span class="line">                             System.out.println(<span class="string">"Error:"</span>+ch+<span class="string">"-"</span>+c);</span><br><span class="line">                         &#125;</span><br><span class="line">                     &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                         System.out.println(<span class="string">"Error: -"</span>+c);</span><br><span class="line">                     &#125;</span><br><span class="line">                     <span class="keyword">break</span>;</span><br><span class="line">                 <span class="keyword">default</span>:</span><br><span class="line">                     <span class="keyword">break</span>;</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure><blockquote><p>结果：</p><p><img src="\postsource\java数据结构与算法\4\arrayStackResult3.png" alt=""></p></blockquote><h2 id="5-总结"><a href="#5-总结" class="headerlink" title="5.总结"></a>5.总结</h2><p>​    因为栈的操作时间不依赖栈中数据项的个数，所以入栈、出栈操作的时间复杂度都为$O(1)$ 。</p>]]></content>
      
      <categories>
          
          <category> Java数据结构与算法学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java数据结构与算法 </tag>
            
            <tag> 栈 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Java数据结构与算法学习笔记——排序算法</title>
      <link href="/2018/08/01/java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/Java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B03%E2%80%94%E6%8E%92%E5%BA%8F/"/>
      <url>/2018/08/01/java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/Java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B03%E2%80%94%E6%8E%92%E5%BA%8F/</url>
      <content type="html"><![CDATA[<hr><p>​    上一篇博客我们实现的数组结构是无序的，也就是纯粹按照插入顺序进行排列，那么如何进行元素排序，本篇博客我们介绍几种简单的排序算法。 <a id="more"></a></p><h2 id="1-冒泡排序"><a href="#1-冒泡排序" class="headerlink" title="1. 冒泡排序"></a>1. 冒泡排序</h2><p>冒泡排序（Bubble Sort），是一种计算机科学领域的较简单的<a href="https://baike.baidu.com/item/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/5399605" target="_blank" rel="noopener">排序算法</a>。 </p><h3 id="冒泡排序算法的原理："><a href="#冒泡排序算法的原理：" class="headerlink" title="冒泡排序算法的原理："></a>冒泡排序算法的原理：</h3><ol><li>比较相邻的元素。如果第一个比第二个大，就交换他们两个。</li><li>对每一对相邻元素做同样的工作，从开始第一对到结尾的最后一对。在这一点，最后的元素应该会是最大的数。</li><li>针对所有的元素重复以上的步骤，除了最后一个。</li><li>持续每次对越来越少的元素重复上面的步骤，直到没有任何一对数字需要比较。</li></ol><p><img src="\postsource\java数据结构与算法\3\1.gif" alt=""></p><h3 id="Java代码实现："><a href="#Java代码实现：" class="headerlink" title="Java代码实现："></a>Java代码实现：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">bubbleSort</span><span class="params">(<span class="keyword">int</span> []arr)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//i表示一共循环多少轮</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">0</span>;i&lt;arr.length-<span class="number">1</span>;i++) &#123;</span><br><span class="line">            <span class="comment">//加一个开关，当排序已经完成时不再继续循环</span></span><br><span class="line">            <span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br><span class="line">            <span class="comment">//每轮参与比较元素的下标，每轮比较后需要比较的元素减少1</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;arr.length-i-<span class="number">1</span>;j++) &#123;<span class="comment">//-1为了防止溢出</span></span><br><span class="line">                <span class="keyword">if</span>(arr[j]&gt;arr[j+<span class="number">1</span>]) &#123;</span><br><span class="line">                    <span class="keyword">int</span> temp = arr[j];</span><br><span class="line">                    arr[j]=arr[j+<span class="number">1</span>];</span><br><span class="line">                    arr[j+<span class="number">1</span>]=temp;</span><br><span class="line">                    falg = <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(flag)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="冒泡排序时间复杂度分析"><a href="#冒泡排序时间复杂度分析" class="headerlink" title="冒泡排序时间复杂度分析"></a>冒泡排序时间复杂度分析</h3><p>​    设数组元素个数为Ｎ，则第一轮排序有 $N-1$ 次比较，第二轮有 $N-2$ 次，如此类推，这种序列的求和公式为：</p><p>　　$（N-1）+（N-2）+…+1 = N*（N-1）/2$</p><p>​    当Ｎ的值足够大时，按照计算时间复杂度的原则，去掉常数，去掉最高项系数，其复杂度为 $O(N^2)$ </p><p>​    在加入 <code>flag</code> 后，对于一个有序数组，算法完成第一次外层循环后就会返回。实际只发生了$N-1$次比较，所以最好的情况下，该算法的时间复杂度为$O(N)$ 。</p><p>​    其实无论何时，只要看见一个循环嵌套在另一个循环中，我们都可以怀疑这个算法的运行时间为 $O(N^2)$级，外层循环执行 $N$ 次，内层循环对每一次外层循环都执行N次（或者几分之$N$次）。这就意味着大约需要执行$N^2$次某个基本操作。 </p><h2 id="2-选择排序"><a href="#2-选择排序" class="headerlink" title="2. 选择排序"></a>2. 选择排序</h2><p>​    选择排序（Selection sort）是一种简单直观的<a href="https://baike.baidu.com/item/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95" target="_blank" rel="noopener">排序算法</a>。它的工作原理是每一次从待排序的数据元素中选出最小（或最大）的一个元素，存放在序列的起始位置，直到全部待排序的数据元素排完。  </p><h3 id="选择排序原理"><a href="#选择排序原理" class="headerlink" title="选择排序原理"></a>选择排序原理</h3><p><img src="\postsource\java数据结构与算法\3\selSort.jpg" alt=""></p><h3 id="Java代码实现：-1"><a href="#Java代码实现：-1" class="headerlink" title="Java代码实现："></a>Java代码实现：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">selectSort</span><span class="params">(<span class="keyword">int</span>[]a)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> minIndex=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> temp=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>((a==<span class="keyword">null</span>)||(a.length==<span class="number">0</span>))</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;a.length-<span class="number">1</span>;i++)&#123;</span><br><span class="line">        minIndex=i;<span class="comment">//无序区的最小数据数组下标</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span>  j=i+<span class="number">1</span>;j&lt;a.length;j++)&#123;</span><br><span class="line">            <span class="comment">//在无序区中循环两两比对找到最小数据并保存其数组下标</span></span><br><span class="line">            <span class="keyword">if</span>(a[j]&lt;a[minIndex])&#123;</span><br><span class="line">                minIndex=j; </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//将最小元素放到本次循环的前端</span></span><br><span class="line">        <span class="keyword">if</span>(i != minIndex )&#123;</span><br><span class="line">            temp=a[i];</span><br><span class="line">        a[i]=a[minIndex];</span><br><span class="line">        a[minIndex]=temp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="选择排序时间复杂度分析"><a href="#选择排序时间复杂度分析" class="headerlink" title="选择排序时间复杂度分析"></a>选择排序时间复杂度分析</h3><p>​    选择排序的比较操作同冒泡排序一样，都是$N*（N-1）/2$ 次，所以其时间复杂度表示为 $O(N^2)$ ，但其交换操作却比冒泡排序少的多，介于 $0$ 到 $N-1$ 之间，所以选择排序无疑是比冒泡排序快的。</p><h2 id="3-插入排序"><a href="#3-插入排序" class="headerlink" title="3. 插入排序"></a>3. 插入排序</h2><p>​    有一个已经有序的数据序列，要求在这个已经排好的数据序列中插入一个数，但要求插入后此数据序列仍然有序，这个时候就要用到一种新的排序方法——插入排序法。</p><p>​    插入排序还分为直接插入排序、二分插入排序、链表插入排序、希尔排序等等，这里我们只是以直接插入排序讲解。</p><h3 id="插入排序原理"><a href="#插入排序原理" class="headerlink" title="插入排序原理"></a>插入排序原理</h3><p><img src="\postsource\java数据结构与算法\3\insertSort.jpg" alt=""></p><h3 id="Java代码实现：-2"><a href="#Java代码实现：-2" class="headerlink" title="Java代码实现："></a>Java代码实现：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] sort(<span class="keyword">int</span>[] array)&#123;</span><br><span class="line">        <span class="keyword">int</span> j;</span><br><span class="line">        <span class="comment">//从下标为1的元素开始选择合适的位置插入，因为下标为0的只有一个元素，默认是有序的</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span> ; i &lt; array.length ; i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> tmp = array[i];<span class="comment">//记录要插入的数据</span></span><br><span class="line">            j = i;</span><br><span class="line">            <span class="keyword">while</span>(j &gt; <span class="number">0</span> &amp;&amp; tmp &lt; array[j-<span class="number">1</span>])&#123;<span class="comment">//从已经排序的序列最右边的开始比较，找到比其小的数</span></span><br><span class="line">                array[j] = array[j-<span class="number">1</span>];<span class="comment">//向后挪动</span></span><br><span class="line">                j--;</span><br><span class="line">            &#125;</span><br><span class="line">            array[j] = tmp;<span class="comment">//插入有序区</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> array;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="插入排序时间复杂度分析"><a href="#插入排序时间复杂度分析" class="headerlink" title="插入排序时间复杂度分析"></a>插入排序时间复杂度分析</h3><p>​    在第一轮排序中，它最多比较一次，第二轮最多比较两次，一次类推，第N轮，最多比较$N-1$次。因此有 $1+2+3+…+N-1 = N<em>（N-1）/2$ ，所以其时间复杂度表示为 $O(N^2)$ ，但是其不涉及交换操作，在数据基本有序时<del>（比如有序数组中打乱中间的一些元素）</del>，插入排序比其他两种排序方式要快出很多。（在数据基本有序时，其他两种排序方式的比较操作次数可能还是$N</em>（N-1）/2$，而插入排序因为从已排序数组的最右边开始比较，所以比较次数可能接近$N-1$ 次，效率会高出很多）</p><h2 id="4-总结"><a href="#4-总结" class="headerlink" title="4.总结"></a>4.总结</h2><p>​    上面讲的三种排序，冒泡、选择、插入用大 O 表示法都需要 $O(N^2)$ 时间级别。一般不会选择冒泡排序，虽然冒泡排序书写是最简单的，但是平均性能是没有选择排序和插入排序好的。</p><p>　　选择排序把交换次数降低到最低，但是比较次数还是挺大的。当数据量小，并且交换数据相对于比较数据更加耗时的情况下，可以应用选择排序。</p><p>　　在大多数情况下，插入排序是三种算法中最好的选择。</p>]]></content>
      
      <categories>
          
          <category> Java数据结构与算法学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java数据结构与算法 </tag>
            
            <tag> 排序算法 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Java数据结构与算法学习笔记二——数组</title>
      <link href="/2018/07/31/java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/Java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B02%E2%80%94%E6%95%B0%E7%BB%84/"/>
      <url>/2018/07/31/java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/Java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B02%E2%80%94%E6%95%B0%E7%BB%84/</url>
      <content type="html"><![CDATA[<hr><h2 id="1-Java数组介绍"><a href="#1-Java数组介绍" class="headerlink" title="1. Java数组介绍"></a>1. Java数组介绍</h2><p>​    数组对于每一门编程语言来说都是重要的数据结构之一 ，Java中数组是用来存放固定大小的同类型元素。<a id="more"></a></p><h3 id="数组的声明"><a href="#数组的声明" class="headerlink" title="数组的声明"></a>数组的声明</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//声明数组myArray1,声明一个长度为3，只能存放int类型的数据</span></span><br><span class="line"><span class="keyword">int</span> [] myArray1 = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>];</span><br><span class="line"><span class="comment">//声明数组myArray2,声明一个数组元素为 1,2,3的int类型数组</span></span><br><span class="line"><span class="keyword">int</span> [] myArray2 = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br></pre></td></tr></table></figure><h3 id="数组的遍历"><a href="#数组的遍历" class="headerlink" title="数组的遍历"></a>数组的遍历</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> [] array2 = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; array2.length ;i++)&#123;</span><br><span class="line">    System.out.println(array2[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-用类封装数组实现数据结构"><a href="#2-用类封装数组实现数据结构" class="headerlink" title="2. 用类封装数组实现数据结构"></a>2. 用类封装数组实现数据结构</h2><p>​    上一篇文章中我们介绍了一个数据结构必须具有增删改查的基本功能，现在我们用类封装数组，实现以上功能。</p><blockquote><p>假定操作人不会添加重复元素。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> array;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyArray</span> </span>&#123;</span><br><span class="line">    <span class="comment">//定义一个数组</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> [] intArray;</span><br><span class="line">    <span class="comment">//定义数组的实际有效长度</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> elems;</span><br><span class="line">    <span class="comment">//定义数组的最大长度</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> length;</span><br><span class="line">     </span><br><span class="line">    <span class="comment">//默认构造一个长度为50的数组</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyArray</span><span class="params">()</span></span>&#123;</span><br><span class="line">        elems = <span class="number">0</span>;</span><br><span class="line">        length = <span class="number">50</span>;</span><br><span class="line">        intArray = <span class="keyword">new</span> <span class="keyword">int</span>[length];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//构造函数，初始化一个长度为length 的数组</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyArray</span><span class="params">(<span class="keyword">int</span> length)</span></span>&#123;</span><br><span class="line">        elems = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">this</span>.length = length;</span><br><span class="line">        intArray = <span class="keyword">new</span> <span class="keyword">int</span>[length];</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="comment">//获取数组的有效长度</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getSize</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> elems;</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 遍历显示元素</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; elems ; i++)&#123;</span><br><span class="line">            System.out.print(intArray[i]+<span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加元素</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value,假设操作人是不会添加重复元素的，如果有重复元素对于后面的操作都会有影响。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 添加成功返回true,添加的元素超过范围了返回false</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> value)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(elems == length)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            intArray[elems] = value;</span><br><span class="line">            elems++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据下标获取元素</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> i 元素下标</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 查找下标值在数组下标有效范围内，返回下标所表示的元素</span></span><br><span class="line"><span class="comment">     * 查找下标超出数组下标有效值，提示访问下标越界</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(i&lt;<span class="number">0</span> || i&gt;elems)&#123;</span><br><span class="line">            System.out.println(<span class="string">"访问下标越界"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> intArray[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查找元素</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> searchValue</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>查找的元素如果存在则返回下标值，如果不存在，返回 -1</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> searchValue)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i ;</span><br><span class="line">        <span class="keyword">for</span>(i = <span class="number">0</span> ; i &lt; elems ;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(intArray[i] == searchValue)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(i == elems)&#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除元素</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 如果要删除的值不存在，直接返回 false;否则返回true，删除成功</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">delete</span><span class="params">(<span class="keyword">int</span> value)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> k = find(value);</span><br><span class="line">        <span class="keyword">if</span>(k == -<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(k == elems-<span class="number">1</span>)&#123;</span><br><span class="line">                elems--;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i = k; i&lt; elems-<span class="number">1</span> ; i++)&#123;</span><br><span class="line">                    intArray[i] = intArray[i+<span class="number">1</span>];</span><br><span class="line">                &#125;</span><br><span class="line">                 elems--;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 修改数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> oldValue</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> newValue</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 修改成功返回true，修改失败返回false</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">modify</span><span class="params">(<span class="keyword">int</span> oldValue,<span class="keyword">int</span> newValue)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = find(oldValue);</span><br><span class="line">        <span class="keyword">if</span>(i == -<span class="number">1</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">"需要修改的数据不存在"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            intArray[i] = newValue;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-数组的局限性"><a href="#3-数组的局限性" class="headerlink" title="3. 数组的局限性"></a>3. 数组的局限性</h2><p>​    通过以上的代码，我们发现数组是能完成一个数据结构的所有功能的，而且实现起来也不难的，那实际工作中为啥很少使用数组进行数据存储呢？</p><p><em>数组局限性分析：</em></p><ul><li>查找慢，我们是根据元素值来查找，给定一个元素值，对于无序数组，我们需要从数组第一个元素开始遍历，直到找到那个元素。 </li><li>删除慢，我们要先遍历找到元素的位置，然后将其后的元素向前移动一位。</li><li>数组一旦创建，大小就固定了，不能动态扩展，浪费内存。</li><li>插入块，队伍无序数组，增加一个元素很简单，就是在末尾添加即可。</li></ul><h2 id="4-总结"><a href="#4-总结" class="headerlink" title="4. 总结"></a>4. 总结</h2><p>​    本篇文章我们讲解了数组的基本用法，以及用Java语言中的类实现了一个数组的数据结构，但是我们分析该数据结构，发现存在很多性能问题，后面会讲解别的数据结构，看看那些数据结构是如何处理这些问题的。 </p>]]></content>
      
      <categories>
          
          <category> Java数据结构与算法学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java数据结构与算法 </tag>
            
            <tag> 数组 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Java数据结构与算法学习笔记——概述</title>
      <link href="/2018/07/31/java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/Java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01%E2%80%94%E6%A6%82%E8%BF%B0/"/>
      <url>/2018/07/31/java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/Java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01%E2%80%94%E6%A6%82%E8%BF%B0/</url>
      <content type="html"><![CDATA[<hr><p>​    转行到现在一年了，一直没有系统的学习过数据结构算法，工作中确实没用到过，但总不能调一辈子API而不去想其内部实现，查东西只能想到遍历，做一下算法题遇到红黑树这些名词还是一脸懵逼。本着提升自己的编程思维的目的，正好最近公司没啥项目，就开个坑开始学习数据结构与算法。放到这个刚弄好的博客上也是对自己的一种督促，自己也是到处查资料学习，有不对的地方希望大家指正<del>（等我弄好博客的评论功能再说）</del>。<a id="more"></a></p><h2 id="1-什么是数据结构"><a href="#1-什么是数据结构" class="headerlink" title="1. 什么是数据结构"></a>1. 什么是数据结构</h2><p>​    <strong>数据结构是计算机存储、组织数据的方式，指相互之间存在一种或多种特定关系的数据元素的集合。</strong> 即数据怎么组织，怎么描述，在计算机中怎么储存。如把一个班的学生进行编号排队，可以使用 “数组” 来描述，而如果要描述一个家族的谱系，则可以用 “树” 来描述。</p><h2 id="2-常用的数据结构"><a href="#2-常用的数据结构" class="headerlink" title="2. 常用的数据结构"></a>2. 常用的数据结构</h2><p>​    <img src="\postsource\java数据结构与算法\1\1.jpg" alt=""></p><p>​    这几种结构优缺点如下：</p><p><img src="\postsource\java数据结构与算法\1\2.png" alt=""></p><h2 id="3-数据结构的基本功能"><a href="#3-数据结构的基本功能" class="headerlink" title="3. 数据结构的基本功能"></a>3. 数据结构的基本功能</h2><ol><li>插入一条数据项</li><li>寻找某一特定数据项</li><li>删除某一数据项</li><li>迭代各个数据项，以便进行其他操作</li></ol><h2 id="4-什么是算法"><a href="#4-什么是算法" class="headerlink" title="4. 什么是算法"></a>4. 什么是算法</h2><p>​    <strong>简单来说，算法就是定义良好的计算过程，用来将输入数据转化成输出结果。</strong>前面的数据结构，比如链表为啥插入、删除快，而查找慢，平衡的二叉树插入、删除、查找都快，这都是实现这些数据结构的算法所造成的。 </p><h2 id="5-算法的设计原则"><a href="#5-算法的设计原则" class="headerlink" title="5. 算法的设计原则"></a>5. 算法的设计原则</h2><ul><li><p><strong>正确性</strong>：首先，算法应当满足以特定的“规则说明”方式给出的需求。 </p></li><li><p><strong>可读性</strong>：算法为了人的阅读与交流，其次才是计算机执行。因此算法应该易于人的理解；另一方面，晦涩难懂的程序易于隐藏较多的错误而难以调试。 </p></li><li><p><strong>健壮性</strong>：当输入的数据非法时，算法应当恰当的做出反应或进行相应处理，而不是产生莫名其妙的输出结果。并且，处理出错的方法不应是中断程序执行，而是应当返回一个表示错误或错误性质的值，以便在更高的抽象层次上进行处理。 </p></li><li><p><strong>高效率与低存储量需求</strong>：通常算法效率值得是算法执行时间；存储量是指算法执行过程中所需要的最大存储空间。</p><blockquote><p>一个算法执行所耗时间，从理论上是不能计算出来的，必须上机测试才能知道，但上机测试所得时间依赖于计算机的硬件、软件环境等因素，有时容易掩盖算法本身的优势。  </p><p>所以引入算法的时间复杂度的概念，记做：T(n)=O(f(n)) ，表示算法的执行时间随着n的增长而增长的速率，常见算法时间复杂度有小到大依次为：</p><p><em><u>Ο(1)＜Ο(log2n)＜Ο(n)＜Ο(nlog2n)＜Ο(n^2)＜Ο(n^3)＜…＜Ο(2n)＜Ο(n!)</u></em></p></blockquote></li></ul>]]></content>
      
      <categories>
          
          <category> Java数据结构与算法学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java数据结构与算法 </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
